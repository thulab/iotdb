/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package cn.edu.tsinghua.service.rpc.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TSColumnSchema implements org.apache.thrift.TBase<TSColumnSchema, TSColumnSchema._Fields>, java.io.Serializable, Cloneable, Comparable<TSColumnSchema> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TSColumnSchema");

  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField DATA_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("dataType", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField ENCODING_FIELD_DESC = new org.apache.thrift.protocol.TField("encoding", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField OTHER_ARGS_FIELD_DESC = new org.apache.thrift.protocol.TField("otherArgs", org.apache.thrift.protocol.TType.MAP, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TSColumnSchemaStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TSColumnSchemaTupleSchemeFactory());
  }

  public String name; // optional
  public String dataType; // optional
  public String encoding; // optional
  public Map<String,String> otherArgs; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NAME((short)1, "name"),
    DATA_TYPE((short)2, "dataType"),
    ENCODING((short)3, "encoding"),
    OTHER_ARGS((short)4, "otherArgs");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NAME
          return NAME;
        case 2: // DATA_TYPE
          return DATA_TYPE;
        case 3: // ENCODING
          return ENCODING;
        case 4: // OTHER_ARGS
          return OTHER_ARGS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.NAME,_Fields.DATA_TYPE,_Fields.ENCODING,_Fields.OTHER_ARGS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DATA_TYPE, new org.apache.thrift.meta_data.FieldMetaData("dataType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ENCODING, new org.apache.thrift.meta_data.FieldMetaData("encoding", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OTHER_ARGS, new org.apache.thrift.meta_data.FieldMetaData("otherArgs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TSColumnSchema.class, metaDataMap);
  }

  public TSColumnSchema() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TSColumnSchema(TSColumnSchema other) {
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetDataType()) {
      this.dataType = other.dataType;
    }
    if (other.isSetEncoding()) {
      this.encoding = other.encoding;
    }
    if (other.isSetOtherArgs()) {
      Map<String,String> __this__otherArgs = new HashMap<String,String>(other.otherArgs);
      this.otherArgs = __this__otherArgs;
    }
  }

  public TSColumnSchema deepCopy() {
    return new TSColumnSchema(this);
  }

  @Override
  public void clear() {
    this.name = null;
    this.dataType = null;
    this.encoding = null;
    this.otherArgs = null;
  }

  public String getName() {
    return this.name;
  }

  public TSColumnSchema setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getDataType() {
    return this.dataType;
  }

  public TSColumnSchema setDataType(String dataType) {
    this.dataType = dataType;
    return this;
  }

  public void unsetDataType() {
    this.dataType = null;
  }

  /** Returns true if field dataType is set (has been assigned a value) and false otherwise */
  public boolean isSetDataType() {
    return this.dataType != null;
  }

  public void setDataTypeIsSet(boolean value) {
    if (!value) {
      this.dataType = null;
    }
  }

  public String getEncoding() {
    return this.encoding;
  }

  public TSColumnSchema setEncoding(String encoding) {
    this.encoding = encoding;
    return this;
  }

  public void unsetEncoding() {
    this.encoding = null;
  }

  /** Returns true if field encoding is set (has been assigned a value) and false otherwise */
  public boolean isSetEncoding() {
    return this.encoding != null;
  }

  public void setEncodingIsSet(boolean value) {
    if (!value) {
      this.encoding = null;
    }
  }

  public int getOtherArgsSize() {
    return (this.otherArgs == null) ? 0 : this.otherArgs.size();
  }

  public void putToOtherArgs(String key, String val) {
    if (this.otherArgs == null) {
      this.otherArgs = new HashMap<String,String>();
    }
    this.otherArgs.put(key, val);
  }

  public Map<String,String> getOtherArgs() {
    return this.otherArgs;
  }

  public TSColumnSchema setOtherArgs(Map<String,String> otherArgs) {
    this.otherArgs = otherArgs;
    return this;
  }

  public void unsetOtherArgs() {
    this.otherArgs = null;
  }

  /** Returns true if field otherArgs is set (has been assigned a value) and false otherwise */
  public boolean isSetOtherArgs() {
    return this.otherArgs != null;
  }

  public void setOtherArgsIsSet(boolean value) {
    if (!value) {
      this.otherArgs = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case DATA_TYPE:
      if (value == null) {
        unsetDataType();
      } else {
        setDataType((String)value);
      }
      break;

    case ENCODING:
      if (value == null) {
        unsetEncoding();
      } else {
        setEncoding((String)value);
      }
      break;

    case OTHER_ARGS:
      if (value == null) {
        unsetOtherArgs();
      } else {
        setOtherArgs((Map<String,String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NAME:
      return getName();

    case DATA_TYPE:
      return getDataType();

    case ENCODING:
      return getEncoding();

    case OTHER_ARGS:
      return getOtherArgs();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NAME:
      return isSetName();
    case DATA_TYPE:
      return isSetDataType();
    case ENCODING:
      return isSetEncoding();
    case OTHER_ARGS:
      return isSetOtherArgs();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TSColumnSchema)
      return this.equals((TSColumnSchema)that);
    return false;
  }

  public boolean equals(TSColumnSchema that) {
    if (that == null)
      return false;

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_dataType = true && this.isSetDataType();
    boolean that_present_dataType = true && that.isSetDataType();
    if (this_present_dataType || that_present_dataType) {
      if (!(this_present_dataType && that_present_dataType))
        return false;
      if (!this.dataType.equals(that.dataType))
        return false;
    }

    boolean this_present_encoding = true && this.isSetEncoding();
    boolean that_present_encoding = true && that.isSetEncoding();
    if (this_present_encoding || that_present_encoding) {
      if (!(this_present_encoding && that_present_encoding))
        return false;
      if (!this.encoding.equals(that.encoding))
        return false;
    }

    boolean this_present_otherArgs = true && this.isSetOtherArgs();
    boolean that_present_otherArgs = true && that.isSetOtherArgs();
    if (this_present_otherArgs || that_present_otherArgs) {
      if (!(this_present_otherArgs && that_present_otherArgs))
        return false;
      if (!this.otherArgs.equals(that.otherArgs))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(TSColumnSchema other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDataType()).compareTo(other.isSetDataType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDataType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataType, other.dataType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEncoding()).compareTo(other.isSetEncoding());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEncoding()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.encoding, other.encoding);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOtherArgs()).compareTo(other.isSetOtherArgs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOtherArgs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.otherArgs, other.otherArgs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TSColumnSchema(");
    boolean first = true;

    if (isSetName()) {
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
    }
    if (isSetDataType()) {
      if (!first) sb.append(", ");
      sb.append("dataType:");
      if (this.dataType == null) {
        sb.append("null");
      } else {
        sb.append(this.dataType);
      }
      first = false;
    }
    if (isSetEncoding()) {
      if (!first) sb.append(", ");
      sb.append("encoding:");
      if (this.encoding == null) {
        sb.append("null");
      } else {
        sb.append(this.encoding);
      }
      first = false;
    }
    if (isSetOtherArgs()) {
      if (!first) sb.append(", ");
      sb.append("otherArgs:");
      if (this.otherArgs == null) {
        sb.append("null");
      } else {
        sb.append(this.otherArgs);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TSColumnSchemaStandardSchemeFactory implements SchemeFactory {
    public TSColumnSchemaStandardScheme getScheme() {
      return new TSColumnSchemaStandardScheme();
    }
  }

  private static class TSColumnSchemaStandardScheme extends StandardScheme<TSColumnSchema> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TSColumnSchema struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DATA_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dataType = iprot.readString();
              struct.setDataTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ENCODING
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.encoding = iprot.readString();
              struct.setEncodingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // OTHER_ARGS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map164 = iprot.readMapBegin();
                struct.otherArgs = new HashMap<String,String>(2*_map164.size);
                for (int _i165 = 0; _i165 < _map164.size; ++_i165)
                {
                  String _key166;
                  String _val167;
                  _key166 = iprot.readString();
                  _val167 = iprot.readString();
                  struct.otherArgs.put(_key166, _val167);
                }
                iprot.readMapEnd();
              }
              struct.setOtherArgsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TSColumnSchema struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.name != null) {
        if (struct.isSetName()) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.dataType != null) {
        if (struct.isSetDataType()) {
          oprot.writeFieldBegin(DATA_TYPE_FIELD_DESC);
          oprot.writeString(struct.dataType);
          oprot.writeFieldEnd();
        }
      }
      if (struct.encoding != null) {
        if (struct.isSetEncoding()) {
          oprot.writeFieldBegin(ENCODING_FIELD_DESC);
          oprot.writeString(struct.encoding);
          oprot.writeFieldEnd();
        }
      }
      if (struct.otherArgs != null) {
        if (struct.isSetOtherArgs()) {
          oprot.writeFieldBegin(OTHER_ARGS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.otherArgs.size()));
            for (Map.Entry<String, String> _iter168 : struct.otherArgs.entrySet())
            {
              oprot.writeString(_iter168.getKey());
              oprot.writeString(_iter168.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TSColumnSchemaTupleSchemeFactory implements SchemeFactory {
    public TSColumnSchemaTupleScheme getScheme() {
      return new TSColumnSchemaTupleScheme();
    }
  }

  private static class TSColumnSchemaTupleScheme extends TupleScheme<TSColumnSchema> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TSColumnSchema struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetName()) {
        optionals.set(0);
      }
      if (struct.isSetDataType()) {
        optionals.set(1);
      }
      if (struct.isSetEncoding()) {
        optionals.set(2);
      }
      if (struct.isSetOtherArgs()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetDataType()) {
        oprot.writeString(struct.dataType);
      }
      if (struct.isSetEncoding()) {
        oprot.writeString(struct.encoding);
      }
      if (struct.isSetOtherArgs()) {
        {
          oprot.writeI32(struct.otherArgs.size());
          for (Map.Entry<String, String> _iter169 : struct.otherArgs.entrySet())
          {
            oprot.writeString(_iter169.getKey());
            oprot.writeString(_iter169.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TSColumnSchema struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.dataType = iprot.readString();
        struct.setDataTypeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.encoding = iprot.readString();
        struct.setEncodingIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TMap _map170 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.otherArgs = new HashMap<String,String>(2*_map170.size);
          for (int _i171 = 0; _i171 < _map170.size; ++_i171)
          {
            String _key172;
            String _val173;
            _key172 = iprot.readString();
            _val173 = iprot.readString();
            struct.otherArgs.put(_key172, _val173);
          }
        }
        struct.setOtherArgsIsSet(true);
      }
    }
  }

}

