/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package cn.edu.tsinghua.service.rpc.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TSDataValue implements org.apache.thrift.TBase<TSDataValue, TSDataValue._Fields>, java.io.Serializable, Cloneable, Comparable<TSDataValue> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TSDataValue");

  private static final org.apache.thrift.protocol.TField IS_EMPTY_FIELD_DESC = new org.apache.thrift.protocol.TField("is_empty", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField BOOL_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("bool_val", org.apache.thrift.protocol.TType.BOOL, (short)2);
  private static final org.apache.thrift.protocol.TField INT_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("int_val", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField LONG_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("long_val", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField FLOAT_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("float_val", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField DOUBLE_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("double_val", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField BINARY_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("binary_val", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.STRING, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TSDataValueStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TSDataValueTupleSchemeFactory());
  }

  public boolean is_empty; // required
  public boolean bool_val; // optional
  public int int_val; // optional
  public long long_val; // optional
  public double float_val; // optional
  public double double_val; // optional
  public ByteBuffer binary_val; // optional
  public String type; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    IS_EMPTY((short)1, "is_empty"),
    BOOL_VAL((short)2, "bool_val"),
    INT_VAL((short)3, "int_val"),
    LONG_VAL((short)4, "long_val"),
    FLOAT_VAL((short)5, "float_val"),
    DOUBLE_VAL((short)6, "double_val"),
    BINARY_VAL((short)7, "binary_val"),
    TYPE((short)8, "type");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // IS_EMPTY
          return IS_EMPTY;
        case 2: // BOOL_VAL
          return BOOL_VAL;
        case 3: // INT_VAL
          return INT_VAL;
        case 4: // LONG_VAL
          return LONG_VAL;
        case 5: // FLOAT_VAL
          return FLOAT_VAL;
        case 6: // DOUBLE_VAL
          return DOUBLE_VAL;
        case 7: // BINARY_VAL
          return BINARY_VAL;
        case 8: // TYPE
          return TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __IS_EMPTY_ISSET_ID = 0;
  private static final int __BOOL_VAL_ISSET_ID = 1;
  private static final int __INT_VAL_ISSET_ID = 2;
  private static final int __LONG_VAL_ISSET_ID = 3;
  private static final int __FLOAT_VAL_ISSET_ID = 4;
  private static final int __DOUBLE_VAL_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.BOOL_VAL,_Fields.INT_VAL,_Fields.LONG_VAL,_Fields.FLOAT_VAL,_Fields.DOUBLE_VAL,_Fields.BINARY_VAL,_Fields.TYPE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.IS_EMPTY, new org.apache.thrift.meta_data.FieldMetaData("is_empty", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.BOOL_VAL, new org.apache.thrift.meta_data.FieldMetaData("bool_val", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.INT_VAL, new org.apache.thrift.meta_data.FieldMetaData("int_val", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LONG_VAL, new org.apache.thrift.meta_data.FieldMetaData("long_val", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.FLOAT_VAL, new org.apache.thrift.meta_data.FieldMetaData("float_val", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.DOUBLE_VAL, new org.apache.thrift.meta_data.FieldMetaData("double_val", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.BINARY_VAL, new org.apache.thrift.meta_data.FieldMetaData("binary_val", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TSDataValue.class, metaDataMap);
  }

  public TSDataValue() {
  }

  public TSDataValue(
    boolean is_empty)
  {
    this();
    this.is_empty = is_empty;
    setIs_emptyIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TSDataValue(TSDataValue other) {
    __isset_bitfield = other.__isset_bitfield;
    this.is_empty = other.is_empty;
    this.bool_val = other.bool_val;
    this.int_val = other.int_val;
    this.long_val = other.long_val;
    this.float_val = other.float_val;
    this.double_val = other.double_val;
    if (other.isSetBinary_val()) {
      this.binary_val = org.apache.thrift.TBaseHelper.copyBinary(other.binary_val);
;
    }
    if (other.isSetType()) {
      this.type = other.type;
    }
  }

  public TSDataValue deepCopy() {
    return new TSDataValue(this);
  }

  @Override
  public void clear() {
    setIs_emptyIsSet(false);
    this.is_empty = false;
    setBool_valIsSet(false);
    this.bool_val = false;
    setInt_valIsSet(false);
    this.int_val = 0;
    setLong_valIsSet(false);
    this.long_val = 0;
    setFloat_valIsSet(false);
    this.float_val = 0.0;
    setDouble_valIsSet(false);
    this.double_val = 0.0;
    this.binary_val = null;
    this.type = null;
  }

  public boolean isIs_empty() {
    return this.is_empty;
  }

  public TSDataValue setIs_empty(boolean is_empty) {
    this.is_empty = is_empty;
    setIs_emptyIsSet(true);
    return this;
  }

  public void unsetIs_empty() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IS_EMPTY_ISSET_ID);
  }

  /** Returns true if field is_empty is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_empty() {
    return EncodingUtils.testBit(__isset_bitfield, __IS_EMPTY_ISSET_ID);
  }

  public void setIs_emptyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IS_EMPTY_ISSET_ID, value);
  }

  public boolean isBool_val() {
    return this.bool_val;
  }

  public TSDataValue setBool_val(boolean bool_val) {
    this.bool_val = bool_val;
    setBool_valIsSet(true);
    return this;
  }

  public void unsetBool_val() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BOOL_VAL_ISSET_ID);
  }

  /** Returns true if field bool_val is set (has been assigned a value) and false otherwise */
  public boolean isSetBool_val() {
    return EncodingUtils.testBit(__isset_bitfield, __BOOL_VAL_ISSET_ID);
  }

  public void setBool_valIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BOOL_VAL_ISSET_ID, value);
  }

  public int getInt_val() {
    return this.int_val;
  }

  public TSDataValue setInt_val(int int_val) {
    this.int_val = int_val;
    setInt_valIsSet(true);
    return this;
  }

  public void unsetInt_val() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INT_VAL_ISSET_ID);
  }

  /** Returns true if field int_val is set (has been assigned a value) and false otherwise */
  public boolean isSetInt_val() {
    return EncodingUtils.testBit(__isset_bitfield, __INT_VAL_ISSET_ID);
  }

  public void setInt_valIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INT_VAL_ISSET_ID, value);
  }

  public long getLong_val() {
    return this.long_val;
  }

  public TSDataValue setLong_val(long long_val) {
    this.long_val = long_val;
    setLong_valIsSet(true);
    return this;
  }

  public void unsetLong_val() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LONG_VAL_ISSET_ID);
  }

  /** Returns true if field long_val is set (has been assigned a value) and false otherwise */
  public boolean isSetLong_val() {
    return EncodingUtils.testBit(__isset_bitfield, __LONG_VAL_ISSET_ID);
  }

  public void setLong_valIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LONG_VAL_ISSET_ID, value);
  }

  public double getFloat_val() {
    return this.float_val;
  }

  public TSDataValue setFloat_val(double float_val) {
    this.float_val = float_val;
    setFloat_valIsSet(true);
    return this;
  }

  public void unsetFloat_val() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FLOAT_VAL_ISSET_ID);
  }

  /** Returns true if field float_val is set (has been assigned a value) and false otherwise */
  public boolean isSetFloat_val() {
    return EncodingUtils.testBit(__isset_bitfield, __FLOAT_VAL_ISSET_ID);
  }

  public void setFloat_valIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FLOAT_VAL_ISSET_ID, value);
  }

  public double getDouble_val() {
    return this.double_val;
  }

  public TSDataValue setDouble_val(double double_val) {
    this.double_val = double_val;
    setDouble_valIsSet(true);
    return this;
  }

  public void unsetDouble_val() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DOUBLE_VAL_ISSET_ID);
  }

  /** Returns true if field double_val is set (has been assigned a value) and false otherwise */
  public boolean isSetDouble_val() {
    return EncodingUtils.testBit(__isset_bitfield, __DOUBLE_VAL_ISSET_ID);
  }

  public void setDouble_valIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DOUBLE_VAL_ISSET_ID, value);
  }

  public byte[] getBinary_val() {
    setBinary_val(org.apache.thrift.TBaseHelper.rightSize(binary_val));
    return binary_val == null ? null : binary_val.array();
  }

  public ByteBuffer bufferForBinary_val() {
    return binary_val;
  }

  public TSDataValue setBinary_val(byte[] binary_val) {
    setBinary_val(binary_val == null ? (ByteBuffer)null : ByteBuffer.wrap(binary_val));
    return this;
  }

  public TSDataValue setBinary_val(ByteBuffer binary_val) {
    this.binary_val = binary_val;
    return this;
  }

  public void unsetBinary_val() {
    this.binary_val = null;
  }

  /** Returns true if field binary_val is set (has been assigned a value) and false otherwise */
  public boolean isSetBinary_val() {
    return this.binary_val != null;
  }

  public void setBinary_valIsSet(boolean value) {
    if (!value) {
      this.binary_val = null;
    }
  }

  public String getType() {
    return this.type;
  }

  public TSDataValue setType(String type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case IS_EMPTY:
      if (value == null) {
        unsetIs_empty();
      } else {
        setIs_empty((Boolean)value);
      }
      break;

    case BOOL_VAL:
      if (value == null) {
        unsetBool_val();
      } else {
        setBool_val((Boolean)value);
      }
      break;

    case INT_VAL:
      if (value == null) {
        unsetInt_val();
      } else {
        setInt_val((Integer)value);
      }
      break;

    case LONG_VAL:
      if (value == null) {
        unsetLong_val();
      } else {
        setLong_val((Long)value);
      }
      break;

    case FLOAT_VAL:
      if (value == null) {
        unsetFloat_val();
      } else {
        setFloat_val((Double)value);
      }
      break;

    case DOUBLE_VAL:
      if (value == null) {
        unsetDouble_val();
      } else {
        setDouble_val((Double)value);
      }
      break;

    case BINARY_VAL:
      if (value == null) {
        unsetBinary_val();
      } else {
        setBinary_val((ByteBuffer)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case IS_EMPTY:
      return Boolean.valueOf(isIs_empty());

    case BOOL_VAL:
      return Boolean.valueOf(isBool_val());

    case INT_VAL:
      return Integer.valueOf(getInt_val());

    case LONG_VAL:
      return Long.valueOf(getLong_val());

    case FLOAT_VAL:
      return Double.valueOf(getFloat_val());

    case DOUBLE_VAL:
      return Double.valueOf(getDouble_val());

    case BINARY_VAL:
      return getBinary_val();

    case TYPE:
      return getType();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case IS_EMPTY:
      return isSetIs_empty();
    case BOOL_VAL:
      return isSetBool_val();
    case INT_VAL:
      return isSetInt_val();
    case LONG_VAL:
      return isSetLong_val();
    case FLOAT_VAL:
      return isSetFloat_val();
    case DOUBLE_VAL:
      return isSetDouble_val();
    case BINARY_VAL:
      return isSetBinary_val();
    case TYPE:
      return isSetType();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TSDataValue)
      return this.equals((TSDataValue)that);
    return false;
  }

  public boolean equals(TSDataValue that) {
    if (that == null)
      return false;

    boolean this_present_is_empty = true;
    boolean that_present_is_empty = true;
    if (this_present_is_empty || that_present_is_empty) {
      if (!(this_present_is_empty && that_present_is_empty))
        return false;
      if (this.is_empty != that.is_empty)
        return false;
    }

    boolean this_present_bool_val = true && this.isSetBool_val();
    boolean that_present_bool_val = true && that.isSetBool_val();
    if (this_present_bool_val || that_present_bool_val) {
      if (!(this_present_bool_val && that_present_bool_val))
        return false;
      if (this.bool_val != that.bool_val)
        return false;
    }

    boolean this_present_int_val = true && this.isSetInt_val();
    boolean that_present_int_val = true && that.isSetInt_val();
    if (this_present_int_val || that_present_int_val) {
      if (!(this_present_int_val && that_present_int_val))
        return false;
      if (this.int_val != that.int_val)
        return false;
    }

    boolean this_present_long_val = true && this.isSetLong_val();
    boolean that_present_long_val = true && that.isSetLong_val();
    if (this_present_long_val || that_present_long_val) {
      if (!(this_present_long_val && that_present_long_val))
        return false;
      if (this.long_val != that.long_val)
        return false;
    }

    boolean this_present_float_val = true && this.isSetFloat_val();
    boolean that_present_float_val = true && that.isSetFloat_val();
    if (this_present_float_val || that_present_float_val) {
      if (!(this_present_float_val && that_present_float_val))
        return false;
      if (this.float_val != that.float_val)
        return false;
    }

    boolean this_present_double_val = true && this.isSetDouble_val();
    boolean that_present_double_val = true && that.isSetDouble_val();
    if (this_present_double_val || that_present_double_val) {
      if (!(this_present_double_val && that_present_double_val))
        return false;
      if (this.double_val != that.double_val)
        return false;
    }

    boolean this_present_binary_val = true && this.isSetBinary_val();
    boolean that_present_binary_val = true && that.isSetBinary_val();
    if (this_present_binary_val || that_present_binary_val) {
      if (!(this_present_binary_val && that_present_binary_val))
        return false;
      if (!this.binary_val.equals(that.binary_val))
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(TSDataValue other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetIs_empty()).compareTo(other.isSetIs_empty());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_empty()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_empty, other.is_empty);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBool_val()).compareTo(other.isSetBool_val());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBool_val()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bool_val, other.bool_val);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInt_val()).compareTo(other.isSetInt_val());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInt_val()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.int_val, other.int_val);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLong_val()).compareTo(other.isSetLong_val());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLong_val()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.long_val, other.long_val);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFloat_val()).compareTo(other.isSetFloat_val());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFloat_val()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.float_val, other.float_val);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDouble_val()).compareTo(other.isSetDouble_val());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDouble_val()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.double_val, other.double_val);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBinary_val()).compareTo(other.isSetBinary_val());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBinary_val()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.binary_val, other.binary_val);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TSDataValue(");
    boolean first = true;

    sb.append("is_empty:");
    sb.append(this.is_empty);
    first = false;
    if (isSetBool_val()) {
      if (!first) sb.append(", ");
      sb.append("bool_val:");
      sb.append(this.bool_val);
      first = false;
    }
    if (isSetInt_val()) {
      if (!first) sb.append(", ");
      sb.append("int_val:");
      sb.append(this.int_val);
      first = false;
    }
    if (isSetLong_val()) {
      if (!first) sb.append(", ");
      sb.append("long_val:");
      sb.append(this.long_val);
      first = false;
    }
    if (isSetFloat_val()) {
      if (!first) sb.append(", ");
      sb.append("float_val:");
      sb.append(this.float_val);
      first = false;
    }
    if (isSetDouble_val()) {
      if (!first) sb.append(", ");
      sb.append("double_val:");
      sb.append(this.double_val);
      first = false;
    }
    if (isSetBinary_val()) {
      if (!first) sb.append(", ");
      sb.append("binary_val:");
      if (this.binary_val == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.binary_val, sb);
      }
      first = false;
    }
    if (isSetType()) {
      if (!first) sb.append(", ");
      sb.append("type:");
      if (this.type == null) {
        sb.append("null");
      } else {
        sb.append(this.type);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'is_empty' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TSDataValueStandardSchemeFactory implements SchemeFactory {
    public TSDataValueStandardScheme getScheme() {
      return new TSDataValueStandardScheme();
    }
  }

  private static class TSDataValueStandardScheme extends StandardScheme<TSDataValue> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TSDataValue struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // IS_EMPTY
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.is_empty = iprot.readBool();
              struct.setIs_emptyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BOOL_VAL
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.bool_val = iprot.readBool();
              struct.setBool_valIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // INT_VAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.int_val = iprot.readI32();
              struct.setInt_valIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LONG_VAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.long_val = iprot.readI64();
              struct.setLong_valIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // FLOAT_VAL
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.float_val = iprot.readDouble();
              struct.setFloat_valIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DOUBLE_VAL
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.double_val = iprot.readDouble();
              struct.setDouble_valIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // BINARY_VAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.binary_val = iprot.readBinary();
              struct.setBinary_valIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.type = iprot.readString();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetIs_empty()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'is_empty' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TSDataValue struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(IS_EMPTY_FIELD_DESC);
      oprot.writeBool(struct.is_empty);
      oprot.writeFieldEnd();
      if (struct.isSetBool_val()) {
        oprot.writeFieldBegin(BOOL_VAL_FIELD_DESC);
        oprot.writeBool(struct.bool_val);
        oprot.writeFieldEnd();
      }
      if (struct.isSetInt_val()) {
        oprot.writeFieldBegin(INT_VAL_FIELD_DESC);
        oprot.writeI32(struct.int_val);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLong_val()) {
        oprot.writeFieldBegin(LONG_VAL_FIELD_DESC);
        oprot.writeI64(struct.long_val);
        oprot.writeFieldEnd();
      }
      if (struct.isSetFloat_val()) {
        oprot.writeFieldBegin(FLOAT_VAL_FIELD_DESC);
        oprot.writeDouble(struct.float_val);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDouble_val()) {
        oprot.writeFieldBegin(DOUBLE_VAL_FIELD_DESC);
        oprot.writeDouble(struct.double_val);
        oprot.writeFieldEnd();
      }
      if (struct.binary_val != null) {
        if (struct.isSetBinary_val()) {
          oprot.writeFieldBegin(BINARY_VAL_FIELD_DESC);
          oprot.writeBinary(struct.binary_val);
          oprot.writeFieldEnd();
        }
      }
      if (struct.type != null) {
        if (struct.isSetType()) {
          oprot.writeFieldBegin(TYPE_FIELD_DESC);
          oprot.writeString(struct.type);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TSDataValueTupleSchemeFactory implements SchemeFactory {
    public TSDataValueTupleScheme getScheme() {
      return new TSDataValueTupleScheme();
    }
  }

  private static class TSDataValueTupleScheme extends TupleScheme<TSDataValue> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TSDataValue struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeBool(struct.is_empty);
      BitSet optionals = new BitSet();
      if (struct.isSetBool_val()) {
        optionals.set(0);
      }
      if (struct.isSetInt_val()) {
        optionals.set(1);
      }
      if (struct.isSetLong_val()) {
        optionals.set(2);
      }
      if (struct.isSetFloat_val()) {
        optionals.set(3);
      }
      if (struct.isSetDouble_val()) {
        optionals.set(4);
      }
      if (struct.isSetBinary_val()) {
        optionals.set(5);
      }
      if (struct.isSetType()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetBool_val()) {
        oprot.writeBool(struct.bool_val);
      }
      if (struct.isSetInt_val()) {
        oprot.writeI32(struct.int_val);
      }
      if (struct.isSetLong_val()) {
        oprot.writeI64(struct.long_val);
      }
      if (struct.isSetFloat_val()) {
        oprot.writeDouble(struct.float_val);
      }
      if (struct.isSetDouble_val()) {
        oprot.writeDouble(struct.double_val);
      }
      if (struct.isSetBinary_val()) {
        oprot.writeBinary(struct.binary_val);
      }
      if (struct.isSetType()) {
        oprot.writeString(struct.type);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TSDataValue struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.is_empty = iprot.readBool();
      struct.setIs_emptyIsSet(true);
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.bool_val = iprot.readBool();
        struct.setBool_valIsSet(true);
      }
      if (incoming.get(1)) {
        struct.int_val = iprot.readI32();
        struct.setInt_valIsSet(true);
      }
      if (incoming.get(2)) {
        struct.long_val = iprot.readI64();
        struct.setLong_valIsSet(true);
      }
      if (incoming.get(3)) {
        struct.float_val = iprot.readDouble();
        struct.setFloat_valIsSet(true);
      }
      if (incoming.get(4)) {
        struct.double_val = iprot.readDouble();
        struct.setDouble_valIsSet(true);
      }
      if (incoming.get(5)) {
        struct.binary_val = iprot.readBinary();
        struct.setBinary_valIsSet(true);
      }
      if (incoming.get(6)) {
        struct.type = iprot.readString();
        struct.setTypeIsSet(true);
      }
    }
  }

}

