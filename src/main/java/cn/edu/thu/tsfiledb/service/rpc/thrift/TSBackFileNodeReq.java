/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package cn.edu.thu.tsfiledb.service.rpc.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-7-27")
public class TSBackFileNodeReq implements org.apache.thrift.TBase<TSBackFileNodeReq, TSBackFileNodeReq._Fields>, java.io.Serializable, Cloneable, Comparable<TSBackFileNodeReq> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TSBackFileNodeReq");

  private static final org.apache.thrift.protocol.TField NAME_SPACE_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("nameSpacePath", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField FILE_INFO_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("fileInfoList", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.I32, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TSBackFileNodeReqStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TSBackFileNodeReqTupleSchemeFactory());
  }

  public String nameSpacePath; // required
  public List<TSFileInfo> fileInfoList; // required
  public int token; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NAME_SPACE_PATH((short)1, "nameSpacePath"),
    FILE_INFO_LIST((short)2, "fileInfoList"),
    TOKEN((short)3, "token");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NAME_SPACE_PATH
          return NAME_SPACE_PATH;
        case 2: // FILE_INFO_LIST
          return FILE_INFO_LIST;
        case 3: // TOKEN
          return TOKEN;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TOKEN_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NAME_SPACE_PATH, new org.apache.thrift.meta_data.FieldMetaData("nameSpacePath", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FILE_INFO_LIST, new org.apache.thrift.meta_data.FieldMetaData("fileInfoList", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "TSFileInfo"))));
    tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TSBackFileNodeReq.class, metaDataMap);
  }

  public TSBackFileNodeReq() {
  }

  public TSBackFileNodeReq(
    String nameSpacePath,
    List<TSFileInfo> fileInfoList,
    int token)
  {
    this();
    this.nameSpacePath = nameSpacePath;
    this.fileInfoList = fileInfoList;
    this.token = token;
    setTokenIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TSBackFileNodeReq(TSBackFileNodeReq other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetNameSpacePath()) {
      this.nameSpacePath = other.nameSpacePath;
    }
    if (other.isSetFileInfoList()) {
      List<TSFileInfo> __this__fileInfoList = new ArrayList<TSFileInfo>(other.fileInfoList.size());
      for (TSFileInfo other_element : other.fileInfoList) {
        __this__fileInfoList.add(other_element);
      }
      this.fileInfoList = __this__fileInfoList;
    }
    this.token = other.token;
  }

  public TSBackFileNodeReq deepCopy() {
    return new TSBackFileNodeReq(this);
  }

  @Override
  public void clear() {
    this.nameSpacePath = null;
    this.fileInfoList = null;
    setTokenIsSet(false);
    this.token = 0;
  }

  public String getNameSpacePath() {
    return this.nameSpacePath;
  }

  public TSBackFileNodeReq setNameSpacePath(String nameSpacePath) {
    this.nameSpacePath = nameSpacePath;
    return this;
  }

  public void unsetNameSpacePath() {
    this.nameSpacePath = null;
  }

  /** Returns true if field nameSpacePath is set (has been assigned a value) and false otherwise */
  public boolean isSetNameSpacePath() {
    return this.nameSpacePath != null;
  }

  public void setNameSpacePathIsSet(boolean value) {
    if (!value) {
      this.nameSpacePath = null;
    }
  }

  public int getFileInfoListSize() {
    return (this.fileInfoList == null) ? 0 : this.fileInfoList.size();
  }

  public java.util.Iterator<TSFileInfo> getFileInfoListIterator() {
    return (this.fileInfoList == null) ? null : this.fileInfoList.iterator();
  }

  public void addToFileInfoList(TSFileInfo elem) {
    if (this.fileInfoList == null) {
      this.fileInfoList = new ArrayList<TSFileInfo>();
    }
    this.fileInfoList.add(elem);
  }

  public List<TSFileInfo> getFileInfoList() {
    return this.fileInfoList;
  }

  public TSBackFileNodeReq setFileInfoList(List<TSFileInfo> fileInfoList) {
    this.fileInfoList = fileInfoList;
    return this;
  }

  public void unsetFileInfoList() {
    this.fileInfoList = null;
  }

  /** Returns true if field fileInfoList is set (has been assigned a value) and false otherwise */
  public boolean isSetFileInfoList() {
    return this.fileInfoList != null;
  }

  public void setFileInfoListIsSet(boolean value) {
    if (!value) {
      this.fileInfoList = null;
    }
  }

  public int getToken() {
    return this.token;
  }

  public TSBackFileNodeReq setToken(int token) {
    this.token = token;
    setTokenIsSet(true);
    return this;
  }

  public void unsetToken() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOKEN_ISSET_ID);
  }

  /** Returns true if field token is set (has been assigned a value) and false otherwise */
  public boolean isSetToken() {
    return EncodingUtils.testBit(__isset_bitfield, __TOKEN_ISSET_ID);
  }

  public void setTokenIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOKEN_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NAME_SPACE_PATH:
      if (value == null) {
        unsetNameSpacePath();
      } else {
        setNameSpacePath((String)value);
      }
      break;

    case FILE_INFO_LIST:
      if (value == null) {
        unsetFileInfoList();
      } else {
        setFileInfoList((List<TSFileInfo>)value);
      }
      break;

    case TOKEN:
      if (value == null) {
        unsetToken();
      } else {
        setToken((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NAME_SPACE_PATH:
      return getNameSpacePath();

    case FILE_INFO_LIST:
      return getFileInfoList();

    case TOKEN:
      return Integer.valueOf(getToken());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NAME_SPACE_PATH:
      return isSetNameSpacePath();
    case FILE_INFO_LIST:
      return isSetFileInfoList();
    case TOKEN:
      return isSetToken();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TSBackFileNodeReq)
      return this.equals((TSBackFileNodeReq)that);
    return false;
  }

  public boolean equals(TSBackFileNodeReq that) {
    if (that == null)
      return false;

    boolean this_present_nameSpacePath = true && this.isSetNameSpacePath();
    boolean that_present_nameSpacePath = true && that.isSetNameSpacePath();
    if (this_present_nameSpacePath || that_present_nameSpacePath) {
      if (!(this_present_nameSpacePath && that_present_nameSpacePath))
        return false;
      if (!this.nameSpacePath.equals(that.nameSpacePath))
        return false;
    }

    boolean this_present_fileInfoList = true && this.isSetFileInfoList();
    boolean that_present_fileInfoList = true && that.isSetFileInfoList();
    if (this_present_fileInfoList || that_present_fileInfoList) {
      if (!(this_present_fileInfoList && that_present_fileInfoList))
        return false;
      if (!this.fileInfoList.equals(that.fileInfoList))
        return false;
    }

    boolean this_present_token = true;
    boolean that_present_token = true;
    if (this_present_token || that_present_token) {
      if (!(this_present_token && that_present_token))
        return false;
      if (this.token != that.token)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_nameSpacePath = true && (isSetNameSpacePath());
    list.add(present_nameSpacePath);
    if (present_nameSpacePath)
      list.add(nameSpacePath);

    boolean present_fileInfoList = true && (isSetFileInfoList());
    list.add(present_fileInfoList);
    if (present_fileInfoList)
      list.add(fileInfoList);

    boolean present_token = true;
    list.add(present_token);
    if (present_token)
      list.add(token);

    return list.hashCode();
  }

  @Override
  public int compareTo(TSBackFileNodeReq other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetNameSpacePath()).compareTo(other.isSetNameSpacePath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNameSpacePath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nameSpacePath, other.nameSpacePath);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFileInfoList()).compareTo(other.isSetFileInfoList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileInfoList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileInfoList, other.fileInfoList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetToken()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TSBackFileNodeReq(");
    boolean first = true;

    sb.append("nameSpacePath:");
    if (this.nameSpacePath == null) {
      sb.append("null");
    } else {
      sb.append(this.nameSpacePath);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fileInfoList:");
    if (this.fileInfoList == null) {
      sb.append("null");
    } else {
      sb.append(this.fileInfoList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("token:");
    sb.append(this.token);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (nameSpacePath == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'nameSpacePath' was not present! Struct: " + toString());
    }
    if (fileInfoList == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'fileInfoList' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'token' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TSBackFileNodeReqStandardSchemeFactory implements SchemeFactory {
    public TSBackFileNodeReqStandardScheme getScheme() {
      return new TSBackFileNodeReqStandardScheme();
    }
  }

  private static class TSBackFileNodeReqStandardScheme extends StandardScheme<TSBackFileNodeReq> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TSBackFileNodeReq struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NAME_SPACE_PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nameSpacePath = iprot.readString();
              struct.setNameSpacePathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FILE_INFO_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list186 = iprot.readListBegin();
                struct.fileInfoList = new ArrayList<TSFileInfo>(_list186.size);
                TSFileInfo _elem187;
                for (int _i188 = 0; _i188 < _list186.size; ++_i188)
                {
                  _elem187 = new TSFileInfo();
                  _elem187.read(iprot);
                  struct.fileInfoList.add(_elem187);
                }
                iprot.readListEnd();
              }
              struct.setFileInfoListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TOKEN
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.token = iprot.readI32();
              struct.setTokenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetToken()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'token' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TSBackFileNodeReq struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.nameSpacePath != null) {
        oprot.writeFieldBegin(NAME_SPACE_PATH_FIELD_DESC);
        oprot.writeString(struct.nameSpacePath);
        oprot.writeFieldEnd();
      }
      if (struct.fileInfoList != null) {
        oprot.writeFieldBegin(FILE_INFO_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.fileInfoList.size()));
          for (TSFileInfo _iter189 : struct.fileInfoList)
          {
            _iter189.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TOKEN_FIELD_DESC);
      oprot.writeI32(struct.token);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TSBackFileNodeReqTupleSchemeFactory implements SchemeFactory {
    public TSBackFileNodeReqTupleScheme getScheme() {
      return new TSBackFileNodeReqTupleScheme();
    }
  }

  private static class TSBackFileNodeReqTupleScheme extends TupleScheme<TSBackFileNodeReq> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TSBackFileNodeReq struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.nameSpacePath);
      {
        oprot.writeI32(struct.fileInfoList.size());
        for (TSFileInfo _iter190 : struct.fileInfoList)
        {
          _iter190.write(oprot);
        }
      }
      oprot.writeI32(struct.token);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TSBackFileNodeReq struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.nameSpacePath = iprot.readString();
      struct.setNameSpacePathIsSet(true);
      {
        org.apache.thrift.protocol.TList _list191 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.fileInfoList = new ArrayList<TSFileInfo>(_list191.size);
        TSFileInfo _elem192;
        for (int _i193 = 0; _i193 < _list191.size; ++_i193)
        {
          _elem192 = new TSFileInfo();
          _elem192.read(iprot);
          struct.fileInfoList.add(_elem192);
        }
      }
      struct.setFileInfoListIsSet(true);
      struct.token = iprot.readI32();
      struct.setTokenIsSet(true);
    }
  }

}

