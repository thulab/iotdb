/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package cn.edu.thu.tsfiledb.service.rpc.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-7-27")
public class TSFileNodeNameReq implements org.apache.thrift.TBase<TSFileNodeNameReq, TSFileNodeNameReq._Fields>, java.io.Serializable, Cloneable, Comparable<TSFileNodeNameReq> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TSFileNodeNameReq");

  private static final org.apache.thrift.protocol.TField NAME_SPACE_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("nameSpacePath", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField START_TIMES_FIELD_DESC = new org.apache.thrift.protocol.TField("startTimes", org.apache.thrift.protocol.TType.MAP, (short)2);
  private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endTime", org.apache.thrift.protocol.TType.I64, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TSFileNodeNameReqStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TSFileNodeNameReqTupleSchemeFactory());
  }

  public String nameSpacePath; // required
  public Map<String,Long> startTimes; // required
  public long endTime; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NAME_SPACE_PATH((short)1, "nameSpacePath"),
    START_TIMES((short)2, "startTimes"),
    END_TIME((short)3, "endTime");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NAME_SPACE_PATH
          return NAME_SPACE_PATH;
        case 2: // START_TIMES
          return START_TIMES;
        case 3: // END_TIME
          return END_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ENDTIME_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NAME_SPACE_PATH, new org.apache.thrift.meta_data.FieldMetaData("nameSpacePath", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.START_TIMES, new org.apache.thrift.meta_data.FieldMetaData("startTimes", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("endTime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TSFileNodeNameReq.class, metaDataMap);
  }

  public TSFileNodeNameReq() {
  }

  public TSFileNodeNameReq(
    String nameSpacePath,
    Map<String,Long> startTimes,
    long endTime)
  {
    this();
    this.nameSpacePath = nameSpacePath;
    this.startTimes = startTimes;
    this.endTime = endTime;
    setEndTimeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TSFileNodeNameReq(TSFileNodeNameReq other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetNameSpacePath()) {
      this.nameSpacePath = other.nameSpacePath;
    }
    if (other.isSetStartTimes()) {
      Map<String,Long> __this__startTimes = new HashMap<String,Long>(other.startTimes);
      this.startTimes = __this__startTimes;
    }
    this.endTime = other.endTime;
  }

  public TSFileNodeNameReq deepCopy() {
    return new TSFileNodeNameReq(this);
  }

  @Override
  public void clear() {
    this.nameSpacePath = null;
    this.startTimes = null;
    setEndTimeIsSet(false);
    this.endTime = 0;
  }

  public String getNameSpacePath() {
    return this.nameSpacePath;
  }

  public TSFileNodeNameReq setNameSpacePath(String nameSpacePath) {
    this.nameSpacePath = nameSpacePath;
    return this;
  }

  public void unsetNameSpacePath() {
    this.nameSpacePath = null;
  }

  /** Returns true if field nameSpacePath is set (has been assigned a value) and false otherwise */
  public boolean isSetNameSpacePath() {
    return this.nameSpacePath != null;
  }

  public void setNameSpacePathIsSet(boolean value) {
    if (!value) {
      this.nameSpacePath = null;
    }
  }

  public int getStartTimesSize() {
    return (this.startTimes == null) ? 0 : this.startTimes.size();
  }

  public void putToStartTimes(String key, long val) {
    if (this.startTimes == null) {
      this.startTimes = new HashMap<String,Long>();
    }
    this.startTimes.put(key, val);
  }

  public Map<String,Long> getStartTimes() {
    return this.startTimes;
  }

  public TSFileNodeNameReq setStartTimes(Map<String,Long> startTimes) {
    this.startTimes = startTimes;
    return this;
  }

  public void unsetStartTimes() {
    this.startTimes = null;
  }

  /** Returns true if field startTimes is set (has been assigned a value) and false otherwise */
  public boolean isSetStartTimes() {
    return this.startTimes != null;
  }

  public void setStartTimesIsSet(boolean value) {
    if (!value) {
      this.startTimes = null;
    }
  }

  public long getEndTime() {
    return this.endTime;
  }

  public TSFileNodeNameReq setEndTime(long endTime) {
    this.endTime = endTime;
    setEndTimeIsSet(true);
    return this;
  }

  public void unsetEndTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDTIME_ISSET_ID);
  }

  /** Returns true if field endTime is set (has been assigned a value) and false otherwise */
  public boolean isSetEndTime() {
    return EncodingUtils.testBit(__isset_bitfield, __ENDTIME_ISSET_ID);
  }

  public void setEndTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDTIME_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NAME_SPACE_PATH:
      if (value == null) {
        unsetNameSpacePath();
      } else {
        setNameSpacePath((String)value);
      }
      break;

    case START_TIMES:
      if (value == null) {
        unsetStartTimes();
      } else {
        setStartTimes((Map<String,Long>)value);
      }
      break;

    case END_TIME:
      if (value == null) {
        unsetEndTime();
      } else {
        setEndTime((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NAME_SPACE_PATH:
      return getNameSpacePath();

    case START_TIMES:
      return getStartTimes();

    case END_TIME:
      return Long.valueOf(getEndTime());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NAME_SPACE_PATH:
      return isSetNameSpacePath();
    case START_TIMES:
      return isSetStartTimes();
    case END_TIME:
      return isSetEndTime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TSFileNodeNameReq)
      return this.equals((TSFileNodeNameReq)that);
    return false;
  }

  public boolean equals(TSFileNodeNameReq that) {
    if (that == null)
      return false;

    boolean this_present_nameSpacePath = true && this.isSetNameSpacePath();
    boolean that_present_nameSpacePath = true && that.isSetNameSpacePath();
    if (this_present_nameSpacePath || that_present_nameSpacePath) {
      if (!(this_present_nameSpacePath && that_present_nameSpacePath))
        return false;
      if (!this.nameSpacePath.equals(that.nameSpacePath))
        return false;
    }

    boolean this_present_startTimes = true && this.isSetStartTimes();
    boolean that_present_startTimes = true && that.isSetStartTimes();
    if (this_present_startTimes || that_present_startTimes) {
      if (!(this_present_startTimes && that_present_startTimes))
        return false;
      if (!this.startTimes.equals(that.startTimes))
        return false;
    }

    boolean this_present_endTime = true;
    boolean that_present_endTime = true;
    if (this_present_endTime || that_present_endTime) {
      if (!(this_present_endTime && that_present_endTime))
        return false;
      if (this.endTime != that.endTime)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_nameSpacePath = true && (isSetNameSpacePath());
    list.add(present_nameSpacePath);
    if (present_nameSpacePath)
      list.add(nameSpacePath);

    boolean present_startTimes = true && (isSetStartTimes());
    list.add(present_startTimes);
    if (present_startTimes)
      list.add(startTimes);

    boolean present_endTime = true;
    list.add(present_endTime);
    if (present_endTime)
      list.add(endTime);

    return list.hashCode();
  }

  @Override
  public int compareTo(TSFileNodeNameReq other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetNameSpacePath()).compareTo(other.isSetNameSpacePath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNameSpacePath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nameSpacePath, other.nameSpacePath);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartTimes()).compareTo(other.isSetStartTimes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartTimes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTimes, other.startTimes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndTime()).compareTo(other.isSetEndTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTime, other.endTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TSFileNodeNameReq(");
    boolean first = true;

    sb.append("nameSpacePath:");
    if (this.nameSpacePath == null) {
      sb.append("null");
    } else {
      sb.append(this.nameSpacePath);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("startTimes:");
    if (this.startTimes == null) {
      sb.append("null");
    } else {
      sb.append(this.startTimes);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("endTime:");
    sb.append(this.endTime);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (nameSpacePath == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'nameSpacePath' was not present! Struct: " + toString());
    }
    if (startTimes == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'startTimes' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'endTime' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TSFileNodeNameReqStandardSchemeFactory implements SchemeFactory {
    public TSFileNodeNameReqStandardScheme getScheme() {
      return new TSFileNodeNameReqStandardScheme();
    }
  }

  private static class TSFileNodeNameReqStandardScheme extends StandardScheme<TSFileNodeNameReq> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TSFileNodeNameReq struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NAME_SPACE_PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nameSpacePath = iprot.readString();
              struct.setNameSpacePathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // START_TIMES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map168 = iprot.readMapBegin();
                struct.startTimes = new HashMap<String,Long>(2*_map168.size);
                String _key169;
                long _val170;
                for (int _i171 = 0; _i171 < _map168.size; ++_i171)
                {
                  _key169 = iprot.readString();
                  _val170 = iprot.readI64();
                  struct.startTimes.put(_key169, _val170);
                }
                iprot.readMapEnd();
              }
              struct.setStartTimesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // END_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.endTime = iprot.readI64();
              struct.setEndTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetEndTime()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'endTime' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TSFileNodeNameReq struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.nameSpacePath != null) {
        oprot.writeFieldBegin(NAME_SPACE_PATH_FIELD_DESC);
        oprot.writeString(struct.nameSpacePath);
        oprot.writeFieldEnd();
      }
      if (struct.startTimes != null) {
        oprot.writeFieldBegin(START_TIMES_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I64, struct.startTimes.size()));
          for (Map.Entry<String, Long> _iter172 : struct.startTimes.entrySet())
          {
            oprot.writeString(_iter172.getKey());
            oprot.writeI64(_iter172.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(END_TIME_FIELD_DESC);
      oprot.writeI64(struct.endTime);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TSFileNodeNameReqTupleSchemeFactory implements SchemeFactory {
    public TSFileNodeNameReqTupleScheme getScheme() {
      return new TSFileNodeNameReqTupleScheme();
    }
  }

  private static class TSFileNodeNameReqTupleScheme extends TupleScheme<TSFileNodeNameReq> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TSFileNodeNameReq struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.nameSpacePath);
      {
        oprot.writeI32(struct.startTimes.size());
        for (Map.Entry<String, Long> _iter173 : struct.startTimes.entrySet())
        {
          oprot.writeString(_iter173.getKey());
          oprot.writeI64(_iter173.getValue());
        }
      }
      oprot.writeI64(struct.endTime);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TSFileNodeNameReq struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.nameSpacePath = iprot.readString();
      struct.setNameSpacePathIsSet(true);
      {
        org.apache.thrift.protocol.TMap _map174 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I64, iprot.readI32());
        struct.startTimes = new HashMap<String,Long>(2*_map174.size);
        String _key175;
        long _val176;
        for (int _i177 = 0; _i177 < _map174.size; ++_i177)
        {
          _key175 = iprot.readString();
          _val176 = iprot.readI64();
          struct.startTimes.put(_key175, _val176);
        }
      }
      struct.setStartTimesIsSet(true);
      struct.endTime = iprot.readI64();
      struct.setEndTimeIsSet(true);
    }
  }

}

