/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package cn.edu.thu.tsfiledb.service.rpc.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-7-27")
public class TSFileInfo implements org.apache.thrift.TBase<TSFileInfo, TSFileInfo._Fields>, java.io.Serializable, Cloneable, Comparable<TSFileInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TSFileInfo");

  private static final org.apache.thrift.protocol.TField FILE_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("filePath", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField START_TIMES_FIELD_DESC = new org.apache.thrift.protocol.TField("startTimes", org.apache.thrift.protocol.TType.MAP, (short)2);
  private static final org.apache.thrift.protocol.TField END_TIMES_FIELD_DESC = new org.apache.thrift.protocol.TField("endTimes", org.apache.thrift.protocol.TType.MAP, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TSFileInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TSFileInfoTupleSchemeFactory());
  }

  public String filePath; // required
  public Map<String,Long> startTimes; // required
  public Map<String,Long> endTimes; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FILE_PATH((short)1, "filePath"),
    START_TIMES((short)2, "startTimes"),
    END_TIMES((short)3, "endTimes");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FILE_PATH
          return FILE_PATH;
        case 2: // START_TIMES
          return START_TIMES;
        case 3: // END_TIMES
          return END_TIMES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FILE_PATH, new org.apache.thrift.meta_data.FieldMetaData("filePath", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.START_TIMES, new org.apache.thrift.meta_data.FieldMetaData("startTimes", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.END_TIMES, new org.apache.thrift.meta_data.FieldMetaData("endTimes", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TSFileInfo.class, metaDataMap);
  }

  public TSFileInfo() {
  }

  public TSFileInfo(
    String filePath,
    Map<String,Long> startTimes,
    Map<String,Long> endTimes)
  {
    this();
    this.filePath = filePath;
    this.startTimes = startTimes;
    this.endTimes = endTimes;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TSFileInfo(TSFileInfo other) {
    if (other.isSetFilePath()) {
      this.filePath = other.filePath;
    }
    if (other.isSetStartTimes()) {
      Map<String,Long> __this__startTimes = new HashMap<String,Long>(other.startTimes);
      this.startTimes = __this__startTimes;
    }
    if (other.isSetEndTimes()) {
      Map<String,Long> __this__endTimes = new HashMap<String,Long>(other.endTimes);
      this.endTimes = __this__endTimes;
    }
  }

  public TSFileInfo deepCopy() {
    return new TSFileInfo(this);
  }

  @Override
  public void clear() {
    this.filePath = null;
    this.startTimes = null;
    this.endTimes = null;
  }

  public String getFilePath() {
    return this.filePath;
  }

  public TSFileInfo setFilePath(String filePath) {
    this.filePath = filePath;
    return this;
  }

  public void unsetFilePath() {
    this.filePath = null;
  }

  /** Returns true if field filePath is set (has been assigned a value) and false otherwise */
  public boolean isSetFilePath() {
    return this.filePath != null;
  }

  public void setFilePathIsSet(boolean value) {
    if (!value) {
      this.filePath = null;
    }
  }

  public int getStartTimesSize() {
    return (this.startTimes == null) ? 0 : this.startTimes.size();
  }

  public void putToStartTimes(String key, long val) {
    if (this.startTimes == null) {
      this.startTimes = new HashMap<String,Long>();
    }
    this.startTimes.put(key, val);
  }

  public Map<String,Long> getStartTimes() {
    return this.startTimes;
  }

  public TSFileInfo setStartTimes(Map<String,Long> startTimes) {
    this.startTimes = startTimes;
    return this;
  }

  public void unsetStartTimes() {
    this.startTimes = null;
  }

  /** Returns true if field startTimes is set (has been assigned a value) and false otherwise */
  public boolean isSetStartTimes() {
    return this.startTimes != null;
  }

  public void setStartTimesIsSet(boolean value) {
    if (!value) {
      this.startTimes = null;
    }
  }

  public int getEndTimesSize() {
    return (this.endTimes == null) ? 0 : this.endTimes.size();
  }

  public void putToEndTimes(String key, long val) {
    if (this.endTimes == null) {
      this.endTimes = new HashMap<String,Long>();
    }
    this.endTimes.put(key, val);
  }

  public Map<String,Long> getEndTimes() {
    return this.endTimes;
  }

  public TSFileInfo setEndTimes(Map<String,Long> endTimes) {
    this.endTimes = endTimes;
    return this;
  }

  public void unsetEndTimes() {
    this.endTimes = null;
  }

  /** Returns true if field endTimes is set (has been assigned a value) and false otherwise */
  public boolean isSetEndTimes() {
    return this.endTimes != null;
  }

  public void setEndTimesIsSet(boolean value) {
    if (!value) {
      this.endTimes = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case FILE_PATH:
      if (value == null) {
        unsetFilePath();
      } else {
        setFilePath((String)value);
      }
      break;

    case START_TIMES:
      if (value == null) {
        unsetStartTimes();
      } else {
        setStartTimes((Map<String,Long>)value);
      }
      break;

    case END_TIMES:
      if (value == null) {
        unsetEndTimes();
      } else {
        setEndTimes((Map<String,Long>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case FILE_PATH:
      return getFilePath();

    case START_TIMES:
      return getStartTimes();

    case END_TIMES:
      return getEndTimes();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case FILE_PATH:
      return isSetFilePath();
    case START_TIMES:
      return isSetStartTimes();
    case END_TIMES:
      return isSetEndTimes();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TSFileInfo)
      return this.equals((TSFileInfo)that);
    return false;
  }

  public boolean equals(TSFileInfo that) {
    if (that == null)
      return false;

    boolean this_present_filePath = true && this.isSetFilePath();
    boolean that_present_filePath = true && that.isSetFilePath();
    if (this_present_filePath || that_present_filePath) {
      if (!(this_present_filePath && that_present_filePath))
        return false;
      if (!this.filePath.equals(that.filePath))
        return false;
    }

    boolean this_present_startTimes = true && this.isSetStartTimes();
    boolean that_present_startTimes = true && that.isSetStartTimes();
    if (this_present_startTimes || that_present_startTimes) {
      if (!(this_present_startTimes && that_present_startTimes))
        return false;
      if (!this.startTimes.equals(that.startTimes))
        return false;
    }

    boolean this_present_endTimes = true && this.isSetEndTimes();
    boolean that_present_endTimes = true && that.isSetEndTimes();
    if (this_present_endTimes || that_present_endTimes) {
      if (!(this_present_endTimes && that_present_endTimes))
        return false;
      if (!this.endTimes.equals(that.endTimes))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_filePath = true && (isSetFilePath());
    list.add(present_filePath);
    if (present_filePath)
      list.add(filePath);

    boolean present_startTimes = true && (isSetStartTimes());
    list.add(present_startTimes);
    if (present_startTimes)
      list.add(startTimes);

    boolean present_endTimes = true && (isSetEndTimes());
    list.add(present_endTimes);
    if (present_endTimes)
      list.add(endTimes);

    return list.hashCode();
  }

  @Override
  public int compareTo(TSFileInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetFilePath()).compareTo(other.isSetFilePath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFilePath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filePath, other.filePath);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartTimes()).compareTo(other.isSetStartTimes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartTimes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTimes, other.startTimes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndTimes()).compareTo(other.isSetEndTimes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndTimes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTimes, other.endTimes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TSFileInfo(");
    boolean first = true;

    sb.append("filePath:");
    if (this.filePath == null) {
      sb.append("null");
    } else {
      sb.append(this.filePath);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("startTimes:");
    if (this.startTimes == null) {
      sb.append("null");
    } else {
      sb.append(this.startTimes);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("endTimes:");
    if (this.endTimes == null) {
      sb.append("null");
    } else {
      sb.append(this.endTimes);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (filePath == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'filePath' was not present! Struct: " + toString());
    }
    if (startTimes == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'startTimes' was not present! Struct: " + toString());
    }
    if (endTimes == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'endTimes' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TSFileInfoStandardSchemeFactory implements SchemeFactory {
    public TSFileInfoStandardScheme getScheme() {
      return new TSFileInfoStandardScheme();
    }
  }

  private static class TSFileInfoStandardScheme extends StandardScheme<TSFileInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TSFileInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FILE_PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.filePath = iprot.readString();
              struct.setFilePathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // START_TIMES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map194 = iprot.readMapBegin();
                struct.startTimes = new HashMap<String,Long>(2*_map194.size);
                String _key195;
                long _val196;
                for (int _i197 = 0; _i197 < _map194.size; ++_i197)
                {
                  _key195 = iprot.readString();
                  _val196 = iprot.readI64();
                  struct.startTimes.put(_key195, _val196);
                }
                iprot.readMapEnd();
              }
              struct.setStartTimesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // END_TIMES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map198 = iprot.readMapBegin();
                struct.endTimes = new HashMap<String,Long>(2*_map198.size);
                String _key199;
                long _val200;
                for (int _i201 = 0; _i201 < _map198.size; ++_i201)
                {
                  _key199 = iprot.readString();
                  _val200 = iprot.readI64();
                  struct.endTimes.put(_key199, _val200);
                }
                iprot.readMapEnd();
              }
              struct.setEndTimesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TSFileInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.filePath != null) {
        oprot.writeFieldBegin(FILE_PATH_FIELD_DESC);
        oprot.writeString(struct.filePath);
        oprot.writeFieldEnd();
      }
      if (struct.startTimes != null) {
        oprot.writeFieldBegin(START_TIMES_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I64, struct.startTimes.size()));
          for (Map.Entry<String, Long> _iter202 : struct.startTimes.entrySet())
          {
            oprot.writeString(_iter202.getKey());
            oprot.writeI64(_iter202.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.endTimes != null) {
        oprot.writeFieldBegin(END_TIMES_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I64, struct.endTimes.size()));
          for (Map.Entry<String, Long> _iter203 : struct.endTimes.entrySet())
          {
            oprot.writeString(_iter203.getKey());
            oprot.writeI64(_iter203.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TSFileInfoTupleSchemeFactory implements SchemeFactory {
    public TSFileInfoTupleScheme getScheme() {
      return new TSFileInfoTupleScheme();
    }
  }

  private static class TSFileInfoTupleScheme extends TupleScheme<TSFileInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TSFileInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.filePath);
      {
        oprot.writeI32(struct.startTimes.size());
        for (Map.Entry<String, Long> _iter204 : struct.startTimes.entrySet())
        {
          oprot.writeString(_iter204.getKey());
          oprot.writeI64(_iter204.getValue());
        }
      }
      {
        oprot.writeI32(struct.endTimes.size());
        for (Map.Entry<String, Long> _iter205 : struct.endTimes.entrySet())
        {
          oprot.writeString(_iter205.getKey());
          oprot.writeI64(_iter205.getValue());
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TSFileInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.filePath = iprot.readString();
      struct.setFilePathIsSet(true);
      {
        org.apache.thrift.protocol.TMap _map206 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I64, iprot.readI32());
        struct.startTimes = new HashMap<String,Long>(2*_map206.size);
        String _key207;
        long _val208;
        for (int _i209 = 0; _i209 < _map206.size; ++_i209)
        {
          _key207 = iprot.readString();
          _val208 = iprot.readI64();
          struct.startTimes.put(_key207, _val208);
        }
      }
      struct.setStartTimesIsSet(true);
      {
        org.apache.thrift.protocol.TMap _map210 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I64, iprot.readI32());
        struct.endTimes = new HashMap<String,Long>(2*_map210.size);
        String _key211;
        long _val212;
        for (int _i213 = 0; _i213 < _map210.size; ++_i213)
        {
          _key211 = iprot.readString();
          _val212 = iprot.readI64();
          struct.endTimes.put(_key211, _val212);
        }
      }
      struct.setEndTimesIsSet(true);
    }
  }

}

