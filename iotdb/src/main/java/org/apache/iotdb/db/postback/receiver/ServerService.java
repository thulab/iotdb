/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.iotdb.db.postback.receiver;

import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ServerService {

  public interface Iface {

    public boolean getUUID(String uuid, String address) throws org.apache.thrift.TException;

    public String startReceiving(String md5, List<String> filename, ByteBuffer buff, int status)
        throws org.apache.thrift.TException;

    public void getFileNodeInfo() throws org.apache.thrift.TException;

    public void mergeOldData(String path) throws org.apache.thrift.TException;

    public void mergeData() throws org.apache.thrift.TException;

    public void getSchema(ByteBuffer buff, int status) throws org.apache.thrift.TException;

    public boolean merge() throws org.apache.thrift.TException;

    public void afterReceiving() throws org.apache.thrift.TException;

    public void init(String storageGroup) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getUUID(String uuid, String address,
        org.apache.thrift.async.AsyncMethodCallback resultHandler)
        throws org.apache.thrift.TException;

    public void startReceiving(String md5, List<String> filename, ByteBuffer buff, int status,
        org.apache.thrift.async.AsyncMethodCallback resultHandler)
        throws org.apache.thrift.TException;

    public void getFileNodeInfo(org.apache.thrift.async.AsyncMethodCallback resultHandler)
        throws org.apache.thrift.TException;

    public void mergeOldData(String path, org.apache.thrift.async.AsyncMethodCallback resultHandler)
        throws org.apache.thrift.TException;

    public void mergeData(org.apache.thrift.async.AsyncMethodCallback resultHandler)
        throws org.apache.thrift.TException;

    public void getSchema(ByteBuffer buff, int status,
        org.apache.thrift.async.AsyncMethodCallback resultHandler)
        throws org.apache.thrift.TException;

    public void merge(org.apache.thrift.async.AsyncMethodCallback resultHandler)
        throws org.apache.thrift.TException;

    public void afterReceiving(org.apache.thrift.async.AsyncMethodCallback resultHandler)
        throws org.apache.thrift.TException;

    public void init(String storageGroup, org.apache.thrift.async.AsyncMethodCallback resultHandler)
        throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {

    public Client(org.apache.thrift.protocol.TProtocol prot) {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot,
        org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public boolean getUUID(String uuid, String address) throws org.apache.thrift.TException {
      send_getUUID(uuid, address);
      return recv_getUUID();
    }

    public void send_getUUID(String uuid, String address) throws org.apache.thrift.TException {
      getUUID_args args = new getUUID_args();
      args.setUuid(uuid);
      args.setAddress(address);
      sendBase("getUUID", args);
    }

    public boolean recv_getUUID() throws org.apache.thrift.TException {
      getUUID_result result = new getUUID_result();
      receiveBase(result, "getUUID");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(
          org.apache.thrift.TApplicationException.MISSING_RESULT,
          "getUUID failed: unknown result");
    }

    public String startReceiving(String md5, List<String> filename, ByteBuffer buff, int status)
        throws org.apache.thrift.TException {
      send_startReceiving(md5, filename, buff, status);
      return recv_startReceiving();
    }

    public void send_startReceiving(String md5, List<String> filename, ByteBuffer buff, int status)
        throws org.apache.thrift.TException {
      startReceiving_args args = new startReceiving_args();
      args.setMd5(md5);
      args.setFilename(filename);
      args.setBuff(buff);
      args.setStatus(status);
      sendBase("startReceiving", args);
    }

    public String recv_startReceiving() throws org.apache.thrift.TException {
      startReceiving_result result = new startReceiving_result();
      receiveBase(result, "startReceiving");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(
          org.apache.thrift.TApplicationException.MISSING_RESULT,
          "startReceiving failed: unknown result");
    }

    public void getFileNodeInfo() throws org.apache.thrift.TException {
      send_getFileNodeInfo();
      recv_getFileNodeInfo();
    }

    public void send_getFileNodeInfo() throws org.apache.thrift.TException {
      getFileNodeInfo_args args = new getFileNodeInfo_args();
      sendBase("getFileNodeInfo", args);
    }

    public void recv_getFileNodeInfo() throws org.apache.thrift.TException {
      getFileNodeInfo_result result = new getFileNodeInfo_result();
      receiveBase(result, "getFileNodeInfo");
      return;
    }

    public void mergeOldData(String path) throws org.apache.thrift.TException {
      send_mergeOldData(path);
      recv_mergeOldData();
    }

    public void send_mergeOldData(String path) throws org.apache.thrift.TException {
      mergeOldData_args args = new mergeOldData_args();
      args.setPath(path);
      sendBase("mergeOldData", args);
    }

    public void recv_mergeOldData() throws org.apache.thrift.TException {
      mergeOldData_result result = new mergeOldData_result();
      receiveBase(result, "mergeOldData");
      return;
    }

    public void mergeData() throws org.apache.thrift.TException {
      send_mergeData();
      recv_mergeData();
    }

    public void send_mergeData() throws org.apache.thrift.TException {
      mergeData_args args = new mergeData_args();
      sendBase("mergeData", args);
    }

    public void recv_mergeData() throws org.apache.thrift.TException {
      mergeData_result result = new mergeData_result();
      receiveBase(result, "mergeData");
      return;
    }

    public void getSchema(ByteBuffer buff, int status) throws org.apache.thrift.TException {
      send_getSchema(buff, status);
      recv_getSchema();
    }

    public void send_getSchema(ByteBuffer buff, int status) throws org.apache.thrift.TException {
      getSchema_args args = new getSchema_args();
      args.setBuff(buff);
      args.setStatus(status);
      sendBase("getSchema", args);
    }

    public void recv_getSchema() throws org.apache.thrift.TException {
      getSchema_result result = new getSchema_result();
      receiveBase(result, "getSchema");
      return;
    }

    public boolean merge() throws org.apache.thrift.TException {
      send_merge();
      return recv_merge();
    }

    public void send_merge() throws org.apache.thrift.TException {
      merge_args args = new merge_args();
      sendBase("merge", args);
    }

    public boolean recv_merge() throws org.apache.thrift.TException {
      merge_result result = new merge_result();
      receiveBase(result, "merge");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(
          org.apache.thrift.TApplicationException.MISSING_RESULT,
          "merge failed: unknown result");
    }

    public void afterReceiving() throws org.apache.thrift.TException {
      send_afterReceiving();
      recv_afterReceiving();
    }

    public void send_afterReceiving() throws org.apache.thrift.TException {
      afterReceiving_args args = new afterReceiving_args();
      sendBase("afterReceiving", args);
    }

    public void recv_afterReceiving() throws org.apache.thrift.TException {
      afterReceiving_result result = new afterReceiving_result();
      receiveBase(result, "afterReceiving");
      return;
    }

    public void init(String storageGroup) throws org.apache.thrift.TException {
      send_init(storageGroup);
      recv_init();
    }

    public void send_init(String storageGroup) throws org.apache.thrift.TException {
      init_args args = new init_args();
      args.setStorageGroup(storageGroup);
      sendBase("init", args);
    }

    public void recv_init() throws org.apache.thrift.TException {
      init_result result = new init_result();
      receiveBase(result, "init");
      return;
    }

    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {

      public Factory() {
      }

      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }

      public Client getClient(org.apache.thrift.protocol.TProtocol iprot,
          org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

  }

  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements
      AsyncIface {

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory,
        org.apache.thrift.async.TAsyncClientManager clientManager,
        org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getUUID(String uuid, String address,
        org.apache.thrift.async.AsyncMethodCallback resultHandler)
        throws org.apache.thrift.TException {
      checkReady();
      getUUID_call method_call = new getUUID_call(uuid, address, resultHandler, this,
          ___protocolFactory,
          ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public void startReceiving(String md5, List<String> filename, ByteBuffer buff, int status,
        org.apache.thrift.async.AsyncMethodCallback resultHandler)
        throws org.apache.thrift.TException {
      checkReady();
      startReceiving_call method_call = new startReceiving_call(md5, filename, buff, status,
          resultHandler, this,
          ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public void getFileNodeInfo(org.apache.thrift.async.AsyncMethodCallback resultHandler)
        throws org.apache.thrift.TException {
      checkReady();
      getFileNodeInfo_call method_call = new getFileNodeInfo_call(resultHandler, this,
          ___protocolFactory,
          ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public void mergeOldData(String path, org.apache.thrift.async.AsyncMethodCallback resultHandler)
        throws org.apache.thrift.TException {
      checkReady();
      mergeOldData_call method_call = new mergeOldData_call(path, resultHandler, this,
          ___protocolFactory,
          ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public void mergeData(org.apache.thrift.async.AsyncMethodCallback resultHandler)
        throws org.apache.thrift.TException {
      checkReady();
      mergeData_call method_call = new mergeData_call(resultHandler, this, ___protocolFactory,
          ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public void getSchema(ByteBuffer buff, int status,
        org.apache.thrift.async.AsyncMethodCallback resultHandler)
        throws org.apache.thrift.TException {
      checkReady();
      getSchema_call method_call = new getSchema_call(buff, status, resultHandler, this,
          ___protocolFactory,
          ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public void merge(org.apache.thrift.async.AsyncMethodCallback resultHandler)
        throws org.apache.thrift.TException {
      checkReady();
      merge_call method_call = new merge_call(resultHandler, this, ___protocolFactory,
          ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public void afterReceiving(org.apache.thrift.async.AsyncMethodCallback resultHandler)
        throws org.apache.thrift.TException {
      checkReady();
      afterReceiving_call method_call = new afterReceiving_call(resultHandler, this,
          ___protocolFactory,
          ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public void init(String storageGroup, org.apache.thrift.async.AsyncMethodCallback resultHandler)
        throws org.apache.thrift.TException {
      checkReady();
      init_call method_call = new init_call(storageGroup, resultHandler, this, ___protocolFactory,
          ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Factory implements
        org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {

      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;

      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager,
          org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }

      public AsyncClient getAsyncClient(
          org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public static class getUUID_call extends org.apache.thrift.async.TAsyncMethodCall {

      private String uuid;
      private String address;

      public getUUID_call(String uuid, String address,
          org.apache.thrift.async.AsyncMethodCallback resultHandler,
          org.apache.thrift.async.TAsyncClient client,
          org.apache.thrift.protocol.TProtocolFactory protocolFactory,
          org.apache.thrift.transport.TNonblockingTransport transport)
          throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uuid = uuid;
        this.address = address;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot)
          throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getUUID",
            org.apache.thrift.protocol.TMessageType.CALL, 0));
        getUUID_args args = new getUUID_args();
        args.setUuid(uuid);
        args.setAddress(address);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
            getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory()
            .getProtocol(memoryTransport);
        return (new Client(prot)).recv_getUUID();
      }
    }

    public static class startReceiving_call extends org.apache.thrift.async.TAsyncMethodCall {

      private String md5;
      private List<String> filename;
      private ByteBuffer buff;
      private int status;

      public startReceiving_call(String md5, List<String> filename, ByteBuffer buff, int status,
          org.apache.thrift.async.AsyncMethodCallback resultHandler,
          org.apache.thrift.async.TAsyncClient client,
          org.apache.thrift.protocol.TProtocolFactory protocolFactory,
          org.apache.thrift.transport.TNonblockingTransport transport)
          throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.md5 = md5;
        this.filename = filename;
        this.buff = buff;
        this.status = status;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot)
          throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("startReceiving",
            org.apache.thrift.protocol.TMessageType.CALL, 0));
        startReceiving_args args = new startReceiving_args();
        args.setMd5(md5);
        args.setFilename(filename);
        args.setBuff(buff);
        args.setStatus(status);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
            getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory()
            .getProtocol(memoryTransport);
        return (new Client(prot)).recv_startReceiving();
      }
    }

    public static class getFileNodeInfo_call extends org.apache.thrift.async.TAsyncMethodCall {

      public getFileNodeInfo_call(org.apache.thrift.async.AsyncMethodCallback resultHandler,
          org.apache.thrift.async.TAsyncClient client,
          org.apache.thrift.protocol.TProtocolFactory protocolFactory,
          org.apache.thrift.transport.TNonblockingTransport transport)
          throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot)
          throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFileNodeInfo",
            org.apache.thrift.protocol.TMessageType.CALL, 0));
        getFileNodeInfo_args args = new getFileNodeInfo_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
            getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory()
            .getProtocol(memoryTransport);
        (new Client(prot)).recv_getFileNodeInfo();
      }
    }

    public static class mergeOldData_call extends org.apache.thrift.async.TAsyncMethodCall {

      private String path;

      public mergeOldData_call(String path,
          org.apache.thrift.async.AsyncMethodCallback resultHandler,
          org.apache.thrift.async.TAsyncClient client,
          org.apache.thrift.protocol.TProtocolFactory protocolFactory,
          org.apache.thrift.transport.TNonblockingTransport transport)
          throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.path = path;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot)
          throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("mergeOldData",
            org.apache.thrift.protocol.TMessageType.CALL, 0));
        mergeOldData_args args = new mergeOldData_args();
        args.setPath(path);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
            getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory()
            .getProtocol(memoryTransport);
        (new Client(prot)).recv_mergeOldData();
      }
    }

    public static class mergeData_call extends org.apache.thrift.async.TAsyncMethodCall {

      public mergeData_call(org.apache.thrift.async.AsyncMethodCallback resultHandler,
          org.apache.thrift.async.TAsyncClient client,
          org.apache.thrift.protocol.TProtocolFactory protocolFactory,
          org.apache.thrift.transport.TNonblockingTransport transport)
          throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot)
          throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("mergeData",
            org.apache.thrift.protocol.TMessageType.CALL, 0));
        mergeData_args args = new mergeData_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
            getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory()
            .getProtocol(memoryTransport);
        (new Client(prot)).recv_mergeData();
      }
    }

    public static class getSchema_call extends org.apache.thrift.async.TAsyncMethodCall {

      private ByteBuffer buff;
      private int status;

      public getSchema_call(ByteBuffer buff, int status,
          org.apache.thrift.async.AsyncMethodCallback resultHandler,
          org.apache.thrift.async.TAsyncClient client,
          org.apache.thrift.protocol.TProtocolFactory protocolFactory,
          org.apache.thrift.transport.TNonblockingTransport transport)
          throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.buff = buff;
        this.status = status;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot)
          throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSchema",
            org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSchema_args args = new getSchema_args();
        args.setBuff(buff);
        args.setStatus(status);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
            getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory()
            .getProtocol(memoryTransport);
        (new Client(prot)).recv_getSchema();
      }
    }

    public static class merge_call extends org.apache.thrift.async.TAsyncMethodCall {

      public merge_call(org.apache.thrift.async.AsyncMethodCallback resultHandler,
          org.apache.thrift.async.TAsyncClient client,
          org.apache.thrift.protocol.TProtocolFactory protocolFactory,
          org.apache.thrift.transport.TNonblockingTransport transport)
          throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot)
          throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("merge",
            org.apache.thrift.protocol.TMessageType.CALL, 0));
        merge_args args = new merge_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
            getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory()
            .getProtocol(memoryTransport);
        return (new Client(prot)).recv_merge();
      }
    }

    public static class afterReceiving_call extends org.apache.thrift.async.TAsyncMethodCall {

      public afterReceiving_call(org.apache.thrift.async.AsyncMethodCallback resultHandler,
          org.apache.thrift.async.TAsyncClient client,
          org.apache.thrift.protocol.TProtocolFactory protocolFactory,
          org.apache.thrift.transport.TNonblockingTransport transport)
          throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot)
          throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("afterReceiving",
            org.apache.thrift.protocol.TMessageType.CALL, 0));
        afterReceiving_args args = new afterReceiving_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
            getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory()
            .getProtocol(memoryTransport);
        (new Client(prot)).recv_afterReceiving();
      }
    }

    public static class init_call extends org.apache.thrift.async.TAsyncMethodCall {

      private String storageGroup;

      public init_call(String storageGroup,
          org.apache.thrift.async.AsyncMethodCallback resultHandler,
          org.apache.thrift.async.TAsyncClient client,
          org.apache.thrift.protocol.TProtocolFactory protocolFactory,
          org.apache.thrift.transport.TNonblockingTransport transport)
          throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.storageGroup = storageGroup;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot)
          throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("init",
            org.apache.thrift.protocol.TMessageType.CALL, 0));
        init_args args = new init_args();
        args.setStorageGroup(storageGroup);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
            getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory()
            .getProtocol(memoryTransport);
        (new Client(prot)).recv_init();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I>
      implements org.apache.thrift.TProcessor {

    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());

    public Processor(I iface) {
      super(iface, getProcessMap(
          new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface,
        Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(
        Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      processMap.put("getUUID", new getUUID());
      processMap.put("startReceiving", new startReceiving());
      processMap.put("getFileNodeInfo", new getFileNodeInfo());
      processMap.put("mergeOldData", new mergeOldData());
      processMap.put("mergeData", new mergeData());
      processMap.put("getSchema", new getSchema());
      processMap.put("merge", new merge());
      processMap.put("afterReceiving", new afterReceiving());
      processMap.put("init", new init());
      return processMap;
    }

    public static class getUUID<I extends Iface> extends
        org.apache.thrift.ProcessFunction<I, getUUID_args> {

      public getUUID() {
        super("getUUID");
      }

      public getUUID_args getEmptyArgsInstance() {
        return new getUUID_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getUUID_result getResult(I iface, getUUID_args args)
          throws org.apache.thrift.TException {
        getUUID_result result = new getUUID_result();
        result.success = iface.getUUID(args.uuid, args.address);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class startReceiving<I extends Iface>
        extends org.apache.thrift.ProcessFunction<I, startReceiving_args> {

      public startReceiving() {
        super("startReceiving");
      }

      public startReceiving_args getEmptyArgsInstance() {
        return new startReceiving_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public startReceiving_result getResult(I iface, startReceiving_args args)
          throws org.apache.thrift.TException {
        startReceiving_result result = new startReceiving_result();
        result.success = iface.startReceiving(args.md5, args.filename, args.buff, args.status);
        return result;
      }
    }

    public static class getFileNodeInfo<I extends Iface>
        extends org.apache.thrift.ProcessFunction<I, getFileNodeInfo_args> {

      public getFileNodeInfo() {
        super("getFileNodeInfo");
      }

      public getFileNodeInfo_args getEmptyArgsInstance() {
        return new getFileNodeInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getFileNodeInfo_result getResult(I iface, getFileNodeInfo_args args)
          throws org.apache.thrift.TException {
        getFileNodeInfo_result result = new getFileNodeInfo_result();
        iface.getFileNodeInfo();
        return result;
      }
    }

    public static class mergeOldData<I extends Iface>
        extends org.apache.thrift.ProcessFunction<I, mergeOldData_args> {

      public mergeOldData() {
        super("mergeOldData");
      }

      public mergeOldData_args getEmptyArgsInstance() {
        return new mergeOldData_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public mergeOldData_result getResult(I iface, mergeOldData_args args)
          throws org.apache.thrift.TException {
        mergeOldData_result result = new mergeOldData_result();
        iface.mergeOldData(args.path);
        return result;
      }
    }

    public static class mergeData<I extends Iface> extends
        org.apache.thrift.ProcessFunction<I, mergeData_args> {

      public mergeData() {
        super("mergeData");
      }

      public mergeData_args getEmptyArgsInstance() {
        return new mergeData_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public mergeData_result getResult(I iface, mergeData_args args)
          throws org.apache.thrift.TException {
        mergeData_result result = new mergeData_result();
        iface.mergeData();
        return result;
      }
    }

    public static class getSchema<I extends Iface> extends
        org.apache.thrift.ProcessFunction<I, getSchema_args> {

      public getSchema() {
        super("getSchema");
      }

      public getSchema_args getEmptyArgsInstance() {
        return new getSchema_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getSchema_result getResult(I iface, getSchema_args args)
          throws org.apache.thrift.TException {
        getSchema_result result = new getSchema_result();
        iface.getSchema(args.buff, args.status);
        return result;
      }
    }

    public static class merge<I extends Iface> extends
        org.apache.thrift.ProcessFunction<I, merge_args> {

      public merge() {
        super("merge");
      }

      public merge_args getEmptyArgsInstance() {
        return new merge_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public merge_result getResult(I iface, merge_args args) throws org.apache.thrift.TException {
        merge_result result = new merge_result();
        result.success = iface.merge();
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class afterReceiving<I extends Iface>
        extends org.apache.thrift.ProcessFunction<I, afterReceiving_args> {

      public afterReceiving() {
        super("afterReceiving");
      }

      public afterReceiving_args getEmptyArgsInstance() {
        return new afterReceiving_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public afterReceiving_result getResult(I iface, afterReceiving_args args)
          throws org.apache.thrift.TException {
        afterReceiving_result result = new afterReceiving_result();
        iface.afterReceiving();
        return result;
      }
    }

    public static class init<I extends Iface> extends
        org.apache.thrift.ProcessFunction<I, init_args> {

      public init() {
        super("init");
      }

      public init_args getEmptyArgsInstance() {
        return new init_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public init_result getResult(I iface, init_args args) throws org.apache.thrift.TException {
        init_result result = new init_result();
        iface.init(args.storageGroup);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends
      org.apache.thrift.TBaseAsyncProcessor<I> {

    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());

    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(
          new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface,
        Map<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> getProcessMap(
        Map<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getUUID", new getUUID());
      processMap.put("startReceiving", new startReceiving());
      processMap.put("getFileNodeInfo", new getFileNodeInfo());
      processMap.put("mergeOldData", new mergeOldData());
      processMap.put("mergeData", new mergeData());
      processMap.put("getSchema", new getSchema());
      processMap.put("merge", new merge());
      processMap.put("afterReceiving", new afterReceiving());
      processMap.put("init", new init());
      return processMap;
    }

    public static class getUUID<I extends AsyncIface>
        extends org.apache.thrift.AsyncProcessFunction<I, getUUID_args, Boolean> {

      public getUUID() {
        super("getUUID");
      }

      public getUUID_args getEmptyArgsInstance() {
        return new getUUID_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb,
          final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() {
          public void onComplete(Boolean o) {
            getUUID_result result = new getUUID_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }

          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getUUID_result result = new getUUID_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
                  org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb, msg, msgType, seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getUUID_args args,
          org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.getUUID(args.uuid, args.address, resultHandler);
      }
    }

    public static class startReceiving<I extends AsyncIface>
        extends org.apache.thrift.AsyncProcessFunction<I, startReceiving_args, String> {

      public startReceiving() {
        super("startReceiving");
      }

      public startReceiving_args getEmptyArgsInstance() {
        return new startReceiving_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb,
          final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() {
          public void onComplete(String o) {
            startReceiving_result result = new startReceiving_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }

          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            startReceiving_result result = new startReceiving_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
                  org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb, msg, msgType, seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, startReceiving_args args,
          org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.startReceiving(args.md5, args.filename, args.buff, args.status, resultHandler);
      }
    }

    public static class getFileNodeInfo<I extends AsyncIface>
        extends org.apache.thrift.AsyncProcessFunction<I, getFileNodeInfo_args, Void> {

      public getFileNodeInfo() {
        super("getFileNodeInfo");
      }

      public getFileNodeInfo_args getEmptyArgsInstance() {
        return new getFileNodeInfo_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb,
          final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() {
          public void onComplete(Void o) {
            getFileNodeInfo_result result = new getFileNodeInfo_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }

          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getFileNodeInfo_result result = new getFileNodeInfo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
                  org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb, msg, msgType, seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getFileNodeInfo_args args,
          org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.getFileNodeInfo(resultHandler);
      }
    }

    public static class mergeOldData<I extends AsyncIface>
        extends org.apache.thrift.AsyncProcessFunction<I, mergeOldData_args, Void> {

      public mergeOldData() {
        super("mergeOldData");
      }

      public mergeOldData_args getEmptyArgsInstance() {
        return new mergeOldData_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb,
          final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() {
          public void onComplete(Void o) {
            mergeOldData_result result = new mergeOldData_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }

          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            mergeOldData_result result = new mergeOldData_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
                  org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb, msg, msgType, seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, mergeOldData_args args,
          org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.mergeOldData(args.path, resultHandler);
      }
    }

    public static class mergeData<I extends AsyncIface>
        extends org.apache.thrift.AsyncProcessFunction<I, mergeData_args, Void> {

      public mergeData() {
        super("mergeData");
      }

      public mergeData_args getEmptyArgsInstance() {
        return new mergeData_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb,
          final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() {
          public void onComplete(Void o) {
            mergeData_result result = new mergeData_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }

          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            mergeData_result result = new mergeData_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
                  org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb, msg, msgType, seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, mergeData_args args,
          org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.mergeData(resultHandler);
      }
    }

    public static class getSchema<I extends AsyncIface>
        extends org.apache.thrift.AsyncProcessFunction<I, getSchema_args, Void> {

      public getSchema() {
        super("getSchema");
      }

      public getSchema_args getEmptyArgsInstance() {
        return new getSchema_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb,
          final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() {
          public void onComplete(Void o) {
            getSchema_result result = new getSchema_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }

          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getSchema_result result = new getSchema_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
                  org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb, msg, msgType, seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getSchema_args args,
          org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.getSchema(args.buff, args.status, resultHandler);
      }
    }

    public static class merge<I extends AsyncIface>
        extends org.apache.thrift.AsyncProcessFunction<I, merge_args, Boolean> {

      public merge() {
        super("merge");
      }

      public merge_args getEmptyArgsInstance() {
        return new merge_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb,
          final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() {
          public void onComplete(Boolean o) {
            merge_result result = new merge_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }

          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            merge_result result = new merge_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
                  org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb, msg, msgType, seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, merge_args args,
          org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.merge(resultHandler);
      }
    }

    public static class afterReceiving<I extends AsyncIface>
        extends org.apache.thrift.AsyncProcessFunction<I, afterReceiving_args, Void> {

      public afterReceiving() {
        super("afterReceiving");
      }

      public afterReceiving_args getEmptyArgsInstance() {
        return new afterReceiving_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb,
          final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() {
          public void onComplete(Void o) {
            afterReceiving_result result = new afterReceiving_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }

          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            afterReceiving_result result = new afterReceiving_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
                  org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb, msg, msgType, seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, afterReceiving_args args,
          org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.afterReceiving(resultHandler);
      }
    }

    public static class init<I extends AsyncIface>
        extends org.apache.thrift.AsyncProcessFunction<I, init_args, Void> {

      public init() {
        super("init");
      }

      public init_args getEmptyArgsInstance() {
        return new init_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb,
          final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() {
          public void onComplete(Void o) {
            init_result result = new init_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }

          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            init_result result = new init_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
                  org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb, msg, msgType, seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, init_args args,
          org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler)
          throws TException {
        iface.init(args.storageGroup, resultHandler);
      }
    }

  }

  public static class getUUID_args implements
      org.apache.thrift.TBase<getUUID_args, getUUID_args._Fields>,
      java.io.Serializable, Cloneable, Comparable<getUUID_args> {

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
        "getUUID_args");
    private static final org.apache.thrift.protocol.TField UUID_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "uuid", org.apache.thrift.protocol.TType.STRING, (short) 1);
    private static final org.apache.thrift.protocol.TField ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "address", org.apache.thrift.protocol.TType.STRING, (short) 2);
    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

    static {
      schemes.put(StandardScheme.class, new getUUID_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getUUID_argsTupleSchemeFactory());
    }

    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
          _Fields.class);
      tmpMap.put(_Fields.UUID, new org.apache.thrift.meta_data.FieldMetaData("uuid",
          org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(
              org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("address",
          org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(
              org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData
          .addStructMetaDataMap(getUUID_args.class, metaDataMap);
    }

    public String uuid; // required
    public String address; // required

    public getUUID_args() {
    }

    public getUUID_args(String uuid, String address) {
      this();
      this.uuid = uuid;
      this.address = address;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUUID_args(getUUID_args other) {
      if (other.isSetUuid()) {
        this.uuid = other.uuid;
      }
      if (other.isSetAddress()) {
        this.address = other.address;
      }
    }

    public getUUID_args deepCopy() {
      return new getUUID_args(this);
    }

    @Override
    public void clear() {
      this.uuid = null;
      this.address = null;
    }

    public String getUuid() {
      return this.uuid;
    }

    public getUUID_args setUuid(String uuid) {
      this.uuid = uuid;
      return this;
    }

    public void unsetUuid() {
      this.uuid = null;
    }

    /**
     * Returns true if field uuid is set (has been assigned a value) and false otherwise
     */
    public boolean isSetUuid() {
      return this.uuid != null;
    }

    public void setUuidIsSet(boolean value) {
      if (!value) {
        this.uuid = null;
      }
    }

    public String getAddress() {
      return this.address;
    }

    public getUUID_args setAddress(String address) {
      this.address = address;
      return this;
    }

    public void unsetAddress() {
      this.address = null;
    }

    /**
     * Returns true if field address is set (has been assigned a value) and false otherwise
     */
    public boolean isSetAddress() {
      return this.address != null;
    }

    public void setAddressIsSet(boolean value) {
      if (!value) {
        this.address = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case UUID:
          if (value == null) {
            unsetUuid();
          } else {
            setUuid((String) value);
          }
          break;

        case ADDRESS:
          if (value == null) {
            unsetAddress();
          } else {
            setAddress((String) value);
          }
          break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
        case UUID:
          return getUuid();

        case ADDRESS:
          return getAddress();

      }
      throw new IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
     */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
        case UUID:
          return isSetUuid();
        case ADDRESS:
          return isSetAddress();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null) {
        return false;
      }
      if (that instanceof getUUID_args) {
        return this.equals((getUUID_args) that);
      }
      return false;
    }

    public boolean equals(getUUID_args that) {
      if (that == null) {
        return false;
      }

      boolean this_present_uuid = true && this.isSetUuid();
      boolean that_present_uuid = true && that.isSetUuid();
      if (this_present_uuid || that_present_uuid) {
        if (!(this_present_uuid && that_present_uuid)) {
          return false;
        }
        if (!this.uuid.equals(that.uuid)) {
          return false;
        }
      }

      boolean this_present_address = true && this.isSetAddress();
      boolean that_present_address = true && that.isSetAddress();
      if (this_present_address || that_present_address) {
        if (!(this_present_address && that_present_address)) {
          return false;
        }
        if (!this.address.equals(that.address)) {
          return false;
        }
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getUUID_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUuid()).compareTo(other.isSetUuid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUuid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uuid, other.uuid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAddress()).compareTo(other.isSetAddress());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAddress()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.address, other.address);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getUUID_args(");
      boolean first = true;

      sb.append("uuid:");
      if (this.uuid == null) {
        sb.append("null");
      } else {
        sb.append(this.uuid);
      }
      first = false;
      if (!first) {
        sb.append(", ");
      }
      sb.append("address:");
      if (this.address == null) {
        sb.append("null");
      } else {
        sb.append(this.address);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    /**
     * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
     */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UUID((short) 1, "uuid"), ADDRESS((short) 2, "address");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          case 1: // UUID
            return UUID;
          case 2: // ADDRESS
            return ADDRESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) {
          throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        }
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    private static class getUUID_argsStandardSchemeFactory implements SchemeFactory {

      public getUUID_argsStandardScheme getScheme() {
        return new getUUID_argsStandardScheme();
      }
    }

    private static class getUUID_argsStandardScheme extends StandardScheme<getUUID_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUUID_args struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // UUID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.uuid = iprot.readString();
                struct.setUuidIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ADDRESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.address = iprot.readString();
                struct.setAddressIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the
        // validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUUID_args struct)
          throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.uuid != null) {
          oprot.writeFieldBegin(UUID_FIELD_DESC);
          oprot.writeString(struct.uuid);
          oprot.writeFieldEnd();
        }
        if (struct.address != null) {
          oprot.writeFieldBegin(ADDRESS_FIELD_DESC);
          oprot.writeString(struct.address);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUUID_argsTupleSchemeFactory implements SchemeFactory {

      public getUUID_argsTupleScheme getScheme() {
        return new getUUID_argsTupleScheme();
      }
    }

    private static class getUUID_argsTupleScheme extends TupleScheme<getUUID_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUUID_args struct)
          throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUuid()) {
          optionals.set(0);
        }
        if (struct.isSetAddress()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUuid()) {
          oprot.writeString(struct.uuid);
        }
        if (struct.isSetAddress()) {
          oprot.writeString(struct.address);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUUID_args struct)
          throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.uuid = iprot.readString();
          struct.setUuidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.address = iprot.readString();
          struct.setAddressIsSet(true);
        }
      }
    }

  }

  public static class getUUID_result implements
      org.apache.thrift.TBase<getUUID_result, getUUID_result._Fields>,
      java.io.Serializable, Cloneable, Comparable<getUUID_result> {

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
        "getUUID_result");
    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "success", org.apache.thrift.protocol.TType.BOOL, (short) 0);
    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;

    static {
      schemes.put(StandardScheme.class, new getUUID_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getUUID_resultTupleSchemeFactory());
    }

    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
          _Fields.class);
      tmpMap.put(_Fields.SUCCESS,
          new org.apache.thrift.meta_data.FieldMetaData("success",
              org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(
                  org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData
          .addStructMetaDataMap(getUUID_result.class, metaDataMap);
    }

    public boolean success; // required
    private byte __isset_bitfield = 0;

    public getUUID_result() {
    }

    public getUUID_result(boolean success) {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUUID_result(getUUID_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public getUUID_result deepCopy() {
      return new getUUID_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public getUUID_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /**
     * Returns true if field success is set (has been assigned a value) and false otherwise
     */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case SUCCESS:
          if (value == null) {
            unsetSuccess();
          } else {
            setSuccess((Boolean) value);
          }
          break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
        case SUCCESS:
          return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
     */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
        case SUCCESS:
          return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null) {
        return false;
      }
      if (that instanceof getUUID_result) {
        return this.equals((getUUID_result) that);
      }
      return false;
    }

    public boolean equals(getUUID_result that) {
      if (that == null) {
        return false;
      }

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success)) {
          return false;
        }
        if (this.success != that.success) {
          return false;
        }
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getUUID_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getUUID_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is
        // wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    /**
     * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
     */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short) 0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) {
          throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        }
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    private static class getUUID_resultStandardSchemeFactory implements SchemeFactory {

      public getUUID_resultStandardScheme getScheme() {
        return new getUUID_resultStandardScheme();
      }
    }

    private static class getUUID_resultStandardScheme extends StandardScheme<getUUID_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUUID_result struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the
        // validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUUID_result struct)
          throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUUID_resultTupleSchemeFactory implements SchemeFactory {

      public getUUID_resultTupleScheme getScheme() {
        return new getUUID_resultTupleScheme();
      }
    }

    private static class getUUID_resultTupleScheme extends TupleScheme<getUUID_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUUID_result struct)
          throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUUID_result struct)
          throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class startReceiving_args
      implements org.apache.thrift.TBase<startReceiving_args, startReceiving_args._Fields>,
      java.io.Serializable,
      Cloneable, Comparable<startReceiving_args> {

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
        "startReceiving_args");
    private static final org.apache.thrift.protocol.TField MD5_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "md5", org.apache.thrift.protocol.TType.STRING, (short) 1);
    private static final org.apache.thrift.protocol.TField FILENAME_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "filename", org.apache.thrift.protocol.TType.LIST, (short) 2);
    private static final org.apache.thrift.protocol.TField BUFF_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "buff", org.apache.thrift.protocol.TType.STRING, (short) 3);
    private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "status", org.apache.thrift.protocol.TType.I32, (short) 4);
    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    // isset id assignments
    private static final int __STATUS_ISSET_ID = 0;

    static {
      schemes.put(StandardScheme.class, new startReceiving_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new startReceiving_argsTupleSchemeFactory());
    }

    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
          _Fields.class);
      tmpMap.put(_Fields.MD5, new org.apache.thrift.meta_data.FieldMetaData("md5",
          org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(
              org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FILENAME,
          new org.apache.thrift.meta_data.FieldMetaData("filename",
              org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                  new org.apache.thrift.meta_data.FieldValueMetaData(
                      org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.BUFF, new org.apache.thrift.meta_data.FieldMetaData("buff",
          org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(
              org.apache.thrift.protocol.TType.STRING, true)));
      tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status",
          org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32,
              "int")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData
          .addStructMetaDataMap(startReceiving_args.class, metaDataMap);
    }

    public String md5; // required
    public List<String> filename; // required
    public ByteBuffer buff; // required
    public int status; // required
    private byte __isset_bitfield = 0;

    public startReceiving_args() {
    }

    public startReceiving_args(String md5, List<String> filename, ByteBuffer buff, int status) {
      this();
      this.md5 = md5;
      this.filename = filename;
      this.buff = buff;
      this.status = status;
      setStatusIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public startReceiving_args(startReceiving_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetMd5()) {
        this.md5 = other.md5;
      }
      if (other.isSetFilename()) {
        List<String> __this__filename = new ArrayList<String>(other.filename);
        this.filename = __this__filename;
      }
      if (other.isSetBuff()) {
        this.buff = org.apache.thrift.TBaseHelper.copyBinary(other.buff);
        ;
      }
      this.status = other.status;
    }

    public startReceiving_args deepCopy() {
      return new startReceiving_args(this);
    }

    @Override
    public void clear() {
      this.md5 = null;
      this.filename = null;
      this.buff = null;
      setStatusIsSet(false);
      this.status = 0;
    }

    public String getMd5() {
      return this.md5;
    }

    public startReceiving_args setMd5(String md5) {
      this.md5 = md5;
      return this;
    }

    public void unsetMd5() {
      this.md5 = null;
    }

    /**
     * Returns true if field md5 is set (has been assigned a value) and false otherwise
     */
    public boolean isSetMd5() {
      return this.md5 != null;
    }

    public void setMd5IsSet(boolean value) {
      if (!value) {
        this.md5 = null;
      }
    }

    public int getFilenameSize() {
      return (this.filename == null) ? 0 : this.filename.size();
    }

    public java.util.Iterator<String> getFilenameIterator() {
      return (this.filename == null) ? null : this.filename.iterator();
    }

    public void addToFilename(String elem) {
      if (this.filename == null) {
        this.filename = new ArrayList<String>();
      }
      this.filename.add(elem);
    }

    public List<String> getFilename() {
      return this.filename;
    }

    public startReceiving_args setFilename(List<String> filename) {
      this.filename = filename;
      return this;
    }

    public void unsetFilename() {
      this.filename = null;
    }

    /**
     * Returns true if field filename is set (has been assigned a value) and false otherwise
     */
    public boolean isSetFilename() {
      return this.filename != null;
    }

    public void setFilenameIsSet(boolean value) {
      if (!value) {
        this.filename = null;
      }
    }

    public byte[] getBuff() {
      setBuff(org.apache.thrift.TBaseHelper.rightSize(buff));
      return buff == null ? null : buff.array();
    }

    public startReceiving_args setBuff(byte[] buff) {
      setBuff(buff == null ? (ByteBuffer) null : ByteBuffer.wrap(buff));
      return this;
    }

    public startReceiving_args setBuff(ByteBuffer buff) {
      this.buff = buff;
      return this;
    }

    public ByteBuffer bufferForBuff() {
      return buff;
    }

    public void unsetBuff() {
      this.buff = null;
    }

    /**
     * Returns true if field buff is set (has been assigned a value) and false otherwise
     */
    public boolean isSetBuff() {
      return this.buff != null;
    }

    public void setBuffIsSet(boolean value) {
      if (!value) {
        this.buff = null;
      }
    }

    public int getStatus() {
      return this.status;
    }

    public startReceiving_args setStatus(int status) {
      this.status = status;
      setStatusIsSet(true);
      return this;
    }

    public void unsetStatus() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
    }

    /**
     * Returns true if field status is set (has been assigned a value) and false otherwise
     */
    public boolean isSetStatus() {
      return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
    }

    public void setStatusIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case MD5:
          if (value == null) {
            unsetMd5();
          } else {
            setMd5((String) value);
          }
          break;

        case FILENAME:
          if (value == null) {
            unsetFilename();
          } else {
            setFilename((List<String>) value);
          }
          break;

        case BUFF:
          if (value == null) {
            unsetBuff();
          } else {
            setBuff((ByteBuffer) value);
          }
          break;

        case STATUS:
          if (value == null) {
            unsetStatus();
          } else {
            setStatus((Integer) value);
          }
          break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
        case MD5:
          return getMd5();

        case FILENAME:
          return getFilename();

        case BUFF:
          return getBuff();

        case STATUS:
          return Integer.valueOf(getStatus());

      }
      throw new IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
     */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
        case MD5:
          return isSetMd5();
        case FILENAME:
          return isSetFilename();
        case BUFF:
          return isSetBuff();
        case STATUS:
          return isSetStatus();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null) {
        return false;
      }
      if (that instanceof startReceiving_args) {
        return this.equals((startReceiving_args) that);
      }
      return false;
    }

    public boolean equals(startReceiving_args that) {
      if (that == null) {
        return false;
      }

      boolean this_present_md5 = true && this.isSetMd5();
      boolean that_present_md5 = true && that.isSetMd5();
      if (this_present_md5 || that_present_md5) {
        if (!(this_present_md5 && that_present_md5)) {
          return false;
        }
        if (!this.md5.equals(that.md5)) {
          return false;
        }
      }

      boolean this_present_filename = true && this.isSetFilename();
      boolean that_present_filename = true && that.isSetFilename();
      if (this_present_filename || that_present_filename) {
        if (!(this_present_filename && that_present_filename)) {
          return false;
        }
        if (!this.filename.equals(that.filename)) {
          return false;
        }
      }

      boolean this_present_buff = true && this.isSetBuff();
      boolean that_present_buff = true && that.isSetBuff();
      if (this_present_buff || that_present_buff) {
        if (!(this_present_buff && that_present_buff)) {
          return false;
        }
        if (!this.buff.equals(that.buff)) {
          return false;
        }
      }

      boolean this_present_status = true;
      boolean that_present_status = true;
      if (this_present_status || that_present_status) {
        if (!(this_present_status && that_present_status)) {
          return false;
        }
        if (this.status != that.status) {
          return false;
        }
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(startReceiving_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMd5()).compareTo(other.isSetMd5());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMd5()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.md5, other.md5);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFilename()).compareTo(other.isSetFilename());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFilename()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filename, other.filename);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBuff()).compareTo(other.isSetBuff());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBuff()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.buff, other.buff);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStatus()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("startReceiving_args(");
      boolean first = true;

      sb.append("md5:");
      if (this.md5 == null) {
        sb.append("null");
      } else {
        sb.append(this.md5);
      }
      first = false;
      if (!first) {
        sb.append(", ");
      }
      sb.append("filename:");
      if (this.filename == null) {
        sb.append("null");
      } else {
        sb.append(this.filename);
      }
      first = false;
      if (!first) {
        sb.append(", ");
      }
      sb.append("buff:");
      if (this.buff == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.buff, sb);
      }
      first = false;
      if (!first) {
        sb.append(", ");
      }
      sb.append("status:");
      sb.append(this.status);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is
        // wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    /**
     * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
     */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MD5((short) 1, "md5"), FILENAME((short) 2, "filename"), BUFF((short) 3, "buff"), STATUS(
          (short) 4,
          "status");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          case 1: // MD5
            return MD5;
          case 2: // FILENAME
            return FILENAME;
          case 3: // BUFF
            return BUFF;
          case 4: // STATUS
            return STATUS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) {
          throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        }
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    private static class startReceiving_argsStandardSchemeFactory implements SchemeFactory {

      public startReceiving_argsStandardScheme getScheme() {
        return new startReceiving_argsStandardScheme();
      }
    }

    private static class startReceiving_argsStandardScheme extends
        StandardScheme<startReceiving_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, startReceiving_args struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // MD5
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.md5 = iprot.readString();
                struct.setMd5IsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FILENAME
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.filename = new ArrayList<String>(_list0.size);
                  for (int _i1 = 0; _i1 < _list0.size; ++_i1) {
                    String _elem2;
                    _elem2 = iprot.readString();
                    struct.filename.add(_elem2);
                  }
                  iprot.readListEnd();
                }
                struct.setFilenameIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // BUFF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.buff = iprot.readBinary();
                struct.setBuffIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // STATUS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.status = iprot.readI32();
                struct.setStatusIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the
        // validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, startReceiving_args struct)
          throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.md5 != null) {
          oprot.writeFieldBegin(MD5_FIELD_DESC);
          oprot.writeString(struct.md5);
          oprot.writeFieldEnd();
        }
        if (struct.filename != null) {
          oprot.writeFieldBegin(FILENAME_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(
                org.apache.thrift.protocol.TType.STRING, struct.filename.size()));
            for (String _iter3 : struct.filename) {
              oprot.writeString(_iter3);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.buff != null) {
          oprot.writeFieldBegin(BUFF_FIELD_DESC);
          oprot.writeBinary(struct.buff);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        oprot.writeI32(struct.status);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class startReceiving_argsTupleSchemeFactory implements SchemeFactory {

      public startReceiving_argsTupleScheme getScheme() {
        return new startReceiving_argsTupleScheme();
      }
    }

    private static class startReceiving_argsTupleScheme extends TupleScheme<startReceiving_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, startReceiving_args struct)
          throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMd5()) {
          optionals.set(0);
        }
        if (struct.isSetFilename()) {
          optionals.set(1);
        }
        if (struct.isSetBuff()) {
          optionals.set(2);
        }
        if (struct.isSetStatus()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetMd5()) {
          oprot.writeString(struct.md5);
        }
        if (struct.isSetFilename()) {
          {
            oprot.writeI32(struct.filename.size());
            for (String _iter4 : struct.filename) {
              oprot.writeString(_iter4);
            }
          }
        }
        if (struct.isSetBuff()) {
          oprot.writeBinary(struct.buff);
        }
        if (struct.isSetStatus()) {
          oprot.writeI32(struct.status);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, startReceiving_args struct)
          throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.md5 = iprot.readString();
          struct.setMd5IsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(
                org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.filename = new ArrayList<String>(_list5.size);
            for (int _i6 = 0; _i6 < _list5.size; ++_i6) {
              String _elem7;
              _elem7 = iprot.readString();
              struct.filename.add(_elem7);
            }
          }
          struct.setFilenameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.buff = iprot.readBinary();
          struct.setBuffIsSet(true);
        }
        if (incoming.get(3)) {
          struct.status = iprot.readI32();
          struct.setStatusIsSet(true);
        }
      }
    }

  }

  public static class startReceiving_result
      implements org.apache.thrift.TBase<startReceiving_result, startReceiving_result._Fields>,
      java.io.Serializable, Cloneable, Comparable<startReceiving_result> {

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
        "startReceiving_result");
    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "success", org.apache.thrift.protocol.TType.STRING, (short) 0);
    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

    static {
      schemes.put(StandardScheme.class, new startReceiving_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new startReceiving_resultTupleSchemeFactory());
    }

    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
          _Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success",
          org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(
              org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData
          .addStructMetaDataMap(startReceiving_result.class, metaDataMap);
    }

    public String success; // required

    public startReceiving_result() {
    }

    public startReceiving_result(String success) {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public startReceiving_result(startReceiving_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public startReceiving_result deepCopy() {
      return new startReceiving_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public startReceiving_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /**
     * Returns true if field success is set (has been assigned a value) and false otherwise
     */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case SUCCESS:
          if (value == null) {
            unsetSuccess();
          } else {
            setSuccess((String) value);
          }
          break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
        case SUCCESS:
          return getSuccess();

      }
      throw new IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
     */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
        case SUCCESS:
          return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null) {
        return false;
      }
      if (that instanceof startReceiving_result) {
        return this.equals((startReceiving_result) that);
      }
      return false;
    }

    public boolean equals(startReceiving_result that) {
      if (that == null) {
        return false;
      }

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success)) {
          return false;
        }
        if (!this.success.equals(that.success)) {
          return false;
        }
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(startReceiving_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("startReceiving_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    /**
     * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
     */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short) 0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) {
          throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        }
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    private static class startReceiving_resultStandardSchemeFactory implements SchemeFactory {

      public startReceiving_resultStandardScheme getScheme() {
        return new startReceiving_resultStandardScheme();
      }
    }

    private static class startReceiving_resultStandardScheme extends
        StandardScheme<startReceiving_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, startReceiving_result struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the
        // validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, startReceiving_result struct)
          throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class startReceiving_resultTupleSchemeFactory implements SchemeFactory {

      public startReceiving_resultTupleScheme getScheme() {
        return new startReceiving_resultTupleScheme();
      }
    }

    private static class startReceiving_resultTupleScheme extends
        TupleScheme<startReceiving_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, startReceiving_result struct)
          throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, startReceiving_result struct)
          throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getFileNodeInfo_args
      implements org.apache.thrift.TBase<getFileNodeInfo_args, getFileNodeInfo_args._Fields>,
      java.io.Serializable, Cloneable, Comparable<getFileNodeInfo_args> {

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
        "getFileNodeInfo_args");
    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

    static {
      schemes.put(StandardScheme.class, new getFileNodeInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFileNodeInfo_argsTupleSchemeFactory());
    }

    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
          _Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData
          .addStructMetaDataMap(getFileNodeInfo_args.class, metaDataMap);
    }

    public getFileNodeInfo_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFileNodeInfo_args(getFileNodeInfo_args other) {
    }

    public getFileNodeInfo_args deepCopy() {
      return new getFileNodeInfo_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
     */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null) {
        return false;
      }
      if (that instanceof getFileNodeInfo_args) {
        return this.equals((getFileNodeInfo_args) that);
      }
      return false;
    }

    public boolean equals(getFileNodeInfo_args that) {
      if (that == null) {
        return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getFileNodeInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFileNodeInfo_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    /**
     * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
     */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) {
          throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        }
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    private static class getFileNodeInfo_argsStandardSchemeFactory implements SchemeFactory {

      public getFileNodeInfo_argsStandardScheme getScheme() {
        return new getFileNodeInfo_argsStandardScheme();
      }
    }

    private static class getFileNodeInfo_argsStandardScheme extends
        StandardScheme<getFileNodeInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFileNodeInfo_args struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the
        // validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFileNodeInfo_args struct)
          throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFileNodeInfo_argsTupleSchemeFactory implements SchemeFactory {

      public getFileNodeInfo_argsTupleScheme getScheme() {
        return new getFileNodeInfo_argsTupleScheme();
      }
    }

    private static class getFileNodeInfo_argsTupleScheme extends TupleScheme<getFileNodeInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFileNodeInfo_args struct)
          throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFileNodeInfo_args struct)
          throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getFileNodeInfo_result
      implements org.apache.thrift.TBase<getFileNodeInfo_result, getFileNodeInfo_result._Fields>,
      java.io.Serializable, Cloneable, Comparable<getFileNodeInfo_result> {

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
        "getFileNodeInfo_result");
    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

    static {
      schemes.put(StandardScheme.class, new getFileNodeInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFileNodeInfo_resultTupleSchemeFactory());
    }

    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
          _Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData
          .addStructMetaDataMap(getFileNodeInfo_result.class, metaDataMap);
    }

    public getFileNodeInfo_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFileNodeInfo_result(getFileNodeInfo_result other) {
    }

    public getFileNodeInfo_result deepCopy() {
      return new getFileNodeInfo_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
     */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null) {
        return false;
      }
      if (that instanceof getFileNodeInfo_result) {
        return this.equals((getFileNodeInfo_result) that);
      }
      return false;
    }

    public boolean equals(getFileNodeInfo_result that) {
      if (that == null) {
        return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getFileNodeInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFileNodeInfo_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    /**
     * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
     */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) {
          throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        }
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    private static class getFileNodeInfo_resultStandardSchemeFactory implements SchemeFactory {

      public getFileNodeInfo_resultStandardScheme getScheme() {
        return new getFileNodeInfo_resultStandardScheme();
      }
    }

    private static class getFileNodeInfo_resultStandardScheme extends
        StandardScheme<getFileNodeInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFileNodeInfo_result struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the
        // validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFileNodeInfo_result struct)
          throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFileNodeInfo_resultTupleSchemeFactory implements SchemeFactory {

      public getFileNodeInfo_resultTupleScheme getScheme() {
        return new getFileNodeInfo_resultTupleScheme();
      }
    }

    private static class getFileNodeInfo_resultTupleScheme extends
        TupleScheme<getFileNodeInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFileNodeInfo_result struct)
          throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFileNodeInfo_result struct)
          throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class mergeOldData_args
      implements org.apache.thrift.TBase<mergeOldData_args, mergeOldData_args._Fields>,
      java.io.Serializable,
      Cloneable, Comparable<mergeOldData_args> {

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
        "mergeOldData_args");
    private static final org.apache.thrift.protocol.TField PATH_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "seriesPath", org.apache.thrift.protocol.TType.STRING, (short) 1);
    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

    static {
      schemes.put(StandardScheme.class, new mergeOldData_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new mergeOldData_argsTupleSchemeFactory());
    }

    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
          _Fields.class);
      tmpMap.put(_Fields.PATH, new org.apache.thrift.meta_data.FieldMetaData("seriesPath",
          org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(
              org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData
          .addStructMetaDataMap(mergeOldData_args.class, metaDataMap);
    }

    public String path; // required

    public mergeOldData_args() {
    }

    public mergeOldData_args(String path) {
      this();
      this.path = path;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public mergeOldData_args(mergeOldData_args other) {
      if (other.isSetPath()) {
        this.path = other.path;
      }
    }

    public mergeOldData_args deepCopy() {
      return new mergeOldData_args(this);
    }

    @Override
    public void clear() {
      this.path = null;
    }

    public String getPath() {
      return this.path;
    }

    public mergeOldData_args setPath(String path) {
      this.path = path;
      return this;
    }

    public void unsetPath() {
      this.path = null;
    }

    /**
     * Returns true if field seriesPath is set (has been assigned a value) and false otherwise
     */
    public boolean isSetPath() {
      return this.path != null;
    }

    public void setPathIsSet(boolean value) {
      if (!value) {
        this.path = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case PATH:
          if (value == null) {
            unsetPath();
          } else {
            setPath((String) value);
          }
          break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
        case PATH:
          return getPath();

      }
      throw new IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
     */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
        case PATH:
          return isSetPath();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null) {
        return false;
      }
      if (that instanceof mergeOldData_args) {
        return this.equals((mergeOldData_args) that);
      }
      return false;
    }

    public boolean equals(mergeOldData_args that) {
      if (that == null) {
        return false;
      }

      boolean this_present_path = true && this.isSetPath();
      boolean that_present_path = true && that.isSetPath();
      if (this_present_path || that_present_path) {
        if (!(this_present_path && that_present_path)) {
          return false;
        }
        if (!this.path.equals(that.path)) {
          return false;
        }
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(mergeOldData_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPath()).compareTo(other.isSetPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.path, other.path);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("mergeOldData_args(");
      boolean first = true;

      sb.append("seriesPath:");
      if (this.path == null) {
        sb.append("null");
      } else {
        sb.append(this.path);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    /**
     * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
     */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PATH((short) 1, "seriesPath");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          case 1: // PATH
            return PATH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) {
          throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        }
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    private static class mergeOldData_argsStandardSchemeFactory implements SchemeFactory {

      public mergeOldData_argsStandardScheme getScheme() {
        return new mergeOldData_argsStandardScheme();
      }
    }

    private static class mergeOldData_argsStandardScheme extends StandardScheme<mergeOldData_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, mergeOldData_args struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.path = iprot.readString();
                struct.setPathIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the
        // validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, mergeOldData_args struct)
          throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.path != null) {
          oprot.writeFieldBegin(PATH_FIELD_DESC);
          oprot.writeString(struct.path);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class mergeOldData_argsTupleSchemeFactory implements SchemeFactory {

      public mergeOldData_argsTupleScheme getScheme() {
        return new mergeOldData_argsTupleScheme();
      }
    }

    private static class mergeOldData_argsTupleScheme extends TupleScheme<mergeOldData_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, mergeOldData_args struct)
          throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPath()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPath()) {
          oprot.writeString(struct.path);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, mergeOldData_args struct)
          throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.path = iprot.readString();
          struct.setPathIsSet(true);
        }
      }
    }

  }

  public static class mergeOldData_result
      implements org.apache.thrift.TBase<mergeOldData_result, mergeOldData_result._Fields>,
      java.io.Serializable,
      Cloneable, Comparable<mergeOldData_result> {

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
        "mergeOldData_result");
    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

    static {
      schemes.put(StandardScheme.class, new mergeOldData_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new mergeOldData_resultTupleSchemeFactory());
    }

    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
          _Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData
          .addStructMetaDataMap(mergeOldData_result.class, metaDataMap);
    }

    public mergeOldData_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public mergeOldData_result(mergeOldData_result other) {
    }

    public mergeOldData_result deepCopy() {
      return new mergeOldData_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
     */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null) {
        return false;
      }
      if (that instanceof mergeOldData_result) {
        return this.equals((mergeOldData_result) that);
      }
      return false;
    }

    public boolean equals(mergeOldData_result that) {
      if (that == null) {
        return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(mergeOldData_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("mergeOldData_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    /**
     * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
     */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) {
          throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        }
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    private static class mergeOldData_resultStandardSchemeFactory implements SchemeFactory {

      public mergeOldData_resultStandardScheme getScheme() {
        return new mergeOldData_resultStandardScheme();
      }
    }

    private static class mergeOldData_resultStandardScheme extends
        StandardScheme<mergeOldData_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, mergeOldData_result struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the
        // validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, mergeOldData_result struct)
          throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class mergeOldData_resultTupleSchemeFactory implements SchemeFactory {

      public mergeOldData_resultTupleScheme getScheme() {
        return new mergeOldData_resultTupleScheme();
      }
    }

    private static class mergeOldData_resultTupleScheme extends TupleScheme<mergeOldData_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, mergeOldData_result struct)
          throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, mergeOldData_result struct)
          throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class mergeData_args implements
      org.apache.thrift.TBase<mergeData_args, mergeData_args._Fields>,
      java.io.Serializable, Cloneable, Comparable<mergeData_args> {

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
        "mergeData_args");
    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

    static {
      schemes.put(StandardScheme.class, new mergeData_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new mergeData_argsTupleSchemeFactory());
    }

    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
          _Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData
          .addStructMetaDataMap(mergeData_args.class, metaDataMap);
    }

    public mergeData_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public mergeData_args(mergeData_args other) {
    }

    public mergeData_args deepCopy() {
      return new mergeData_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
     */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null) {
        return false;
      }
      if (that instanceof mergeData_args) {
        return this.equals((mergeData_args) that);
      }
      return false;
    }

    public boolean equals(mergeData_args that) {
      if (that == null) {
        return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(mergeData_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("mergeData_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    /**
     * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
     */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) {
          throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        }
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    private static class mergeData_argsStandardSchemeFactory implements SchemeFactory {

      public mergeData_argsStandardScheme getScheme() {
        return new mergeData_argsStandardScheme();
      }
    }

    private static class mergeData_argsStandardScheme extends StandardScheme<mergeData_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, mergeData_args struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the
        // validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, mergeData_args struct)
          throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class mergeData_argsTupleSchemeFactory implements SchemeFactory {

      public mergeData_argsTupleScheme getScheme() {
        return new mergeData_argsTupleScheme();
      }
    }

    private static class mergeData_argsTupleScheme extends TupleScheme<mergeData_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, mergeData_args struct)
          throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, mergeData_args struct)
          throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class mergeData_result implements
      org.apache.thrift.TBase<mergeData_result, mergeData_result._Fields>,
      java.io.Serializable, Cloneable, Comparable<mergeData_result> {

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
        "mergeData_result");
    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

    static {
      schemes.put(StandardScheme.class, new mergeData_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new mergeData_resultTupleSchemeFactory());
    }

    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
          _Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData
          .addStructMetaDataMap(mergeData_result.class, metaDataMap);
    }

    public mergeData_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public mergeData_result(mergeData_result other) {
    }

    public mergeData_result deepCopy() {
      return new mergeData_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
     */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null) {
        return false;
      }
      if (that instanceof mergeData_result) {
        return this.equals((mergeData_result) that);
      }
      return false;
    }

    public boolean equals(mergeData_result that) {
      if (that == null) {
        return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(mergeData_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("mergeData_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    /**
     * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
     */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) {
          throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        }
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    private static class mergeData_resultStandardSchemeFactory implements SchemeFactory {

      public mergeData_resultStandardScheme getScheme() {
        return new mergeData_resultStandardScheme();
      }
    }

    private static class mergeData_resultStandardScheme extends StandardScheme<mergeData_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, mergeData_result struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the
        // validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, mergeData_result struct)
          throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class mergeData_resultTupleSchemeFactory implements SchemeFactory {

      public mergeData_resultTupleScheme getScheme() {
        return new mergeData_resultTupleScheme();
      }
    }

    private static class mergeData_resultTupleScheme extends TupleScheme<mergeData_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, mergeData_result struct)
          throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, mergeData_result struct)
          throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getSchema_args implements
      org.apache.thrift.TBase<getSchema_args, getSchema_args._Fields>,
      java.io.Serializable, Cloneable, Comparable<getSchema_args> {

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
        "getSchema_args");
    private static final org.apache.thrift.protocol.TField BUFF_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "buff", org.apache.thrift.protocol.TType.STRING, (short) 1);
    private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "status", org.apache.thrift.protocol.TType.I32, (short) 2);
    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    // isset id assignments
    private static final int __STATUS_ISSET_ID = 0;

    static {
      schemes.put(StandardScheme.class, new getSchema_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSchema_argsTupleSchemeFactory());
    }

    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
          _Fields.class);
      tmpMap.put(_Fields.BUFF, new org.apache.thrift.meta_data.FieldMetaData("buff",
          org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(
              org.apache.thrift.protocol.TType.STRING, true)));
      tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status",
          org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32,
              "int")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData
          .addStructMetaDataMap(getSchema_args.class, metaDataMap);
    }

    public ByteBuffer buff; // required
    public int status; // required
    private byte __isset_bitfield = 0;

    public getSchema_args() {
    }

    public getSchema_args(ByteBuffer buff, int status) {
      this();
      this.buff = buff;
      this.status = status;
      setStatusIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSchema_args(getSchema_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetBuff()) {
        this.buff = org.apache.thrift.TBaseHelper.copyBinary(other.buff);
        ;
      }
      this.status = other.status;
    }

    public getSchema_args deepCopy() {
      return new getSchema_args(this);
    }

    @Override
    public void clear() {
      this.buff = null;
      setStatusIsSet(false);
      this.status = 0;
    }

    public byte[] getBuff() {
      setBuff(org.apache.thrift.TBaseHelper.rightSize(buff));
      return buff == null ? null : buff.array();
    }

    public getSchema_args setBuff(byte[] buff) {
      setBuff(buff == null ? (ByteBuffer) null : ByteBuffer.wrap(buff));
      return this;
    }

    public getSchema_args setBuff(ByteBuffer buff) {
      this.buff = buff;
      return this;
    }

    public ByteBuffer bufferForBuff() {
      return buff;
    }

    public void unsetBuff() {
      this.buff = null;
    }

    /**
     * Returns true if field buff is set (has been assigned a value) and false otherwise
     */
    public boolean isSetBuff() {
      return this.buff != null;
    }

    public void setBuffIsSet(boolean value) {
      if (!value) {
        this.buff = null;
      }
    }

    public int getStatus() {
      return this.status;
    }

    public getSchema_args setStatus(int status) {
      this.status = status;
      setStatusIsSet(true);
      return this;
    }

    public void unsetStatus() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
    }

    /**
     * Returns true if field status is set (has been assigned a value) and false otherwise
     */
    public boolean isSetStatus() {
      return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
    }

    public void setStatusIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case BUFF:
          if (value == null) {
            unsetBuff();
          } else {
            setBuff((ByteBuffer) value);
          }
          break;

        case STATUS:
          if (value == null) {
            unsetStatus();
          } else {
            setStatus((Integer) value);
          }
          break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
        case BUFF:
          return getBuff();

        case STATUS:
          return Integer.valueOf(getStatus());

      }
      throw new IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
     */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
        case BUFF:
          return isSetBuff();
        case STATUS:
          return isSetStatus();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null) {
        return false;
      }
      if (that instanceof getSchema_args) {
        return this.equals((getSchema_args) that);
      }
      return false;
    }

    public boolean equals(getSchema_args that) {
      if (that == null) {
        return false;
      }

      boolean this_present_buff = true && this.isSetBuff();
      boolean that_present_buff = true && that.isSetBuff();
      if (this_present_buff || that_present_buff) {
        if (!(this_present_buff && that_present_buff)) {
          return false;
        }
        if (!this.buff.equals(that.buff)) {
          return false;
        }
      }

      boolean this_present_status = true;
      boolean that_present_status = true;
      if (this_present_status || that_present_status) {
        if (!(this_present_status && that_present_status)) {
          return false;
        }
        if (this.status != that.status) {
          return false;
        }
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getSchema_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBuff()).compareTo(other.isSetBuff());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBuff()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.buff, other.buff);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStatus()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSchema_args(");
      boolean first = true;

      sb.append("buff:");
      if (this.buff == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.buff, sb);
      }
      first = false;
      if (!first) {
        sb.append(", ");
      }
      sb.append("status:");
      sb.append(this.status);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is
        // wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    /**
     * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
     */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BUFF((short) 1, "buff"), STATUS((short) 2, "status");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          case 1: // BUFF
            return BUFF;
          case 2: // STATUS
            return STATUS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) {
          throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        }
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    private static class getSchema_argsStandardSchemeFactory implements SchemeFactory {

      public getSchema_argsStandardScheme getScheme() {
        return new getSchema_argsStandardScheme();
      }
    }

    private static class getSchema_argsStandardScheme extends StandardScheme<getSchema_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSchema_args struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // BUFF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.buff = iprot.readBinary();
                struct.setBuffIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // STATUS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.status = iprot.readI32();
                struct.setStatusIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the
        // validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSchema_args struct)
          throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.buff != null) {
          oprot.writeFieldBegin(BUFF_FIELD_DESC);
          oprot.writeBinary(struct.buff);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        oprot.writeI32(struct.status);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSchema_argsTupleSchemeFactory implements SchemeFactory {

      public getSchema_argsTupleScheme getScheme() {
        return new getSchema_argsTupleScheme();
      }
    }

    private static class getSchema_argsTupleScheme extends TupleScheme<getSchema_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSchema_args struct)
          throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBuff()) {
          optionals.set(0);
        }
        if (struct.isSetStatus()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetBuff()) {
          oprot.writeBinary(struct.buff);
        }
        if (struct.isSetStatus()) {
          oprot.writeI32(struct.status);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSchema_args struct)
          throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.buff = iprot.readBinary();
          struct.setBuffIsSet(true);
        }
        if (incoming.get(1)) {
          struct.status = iprot.readI32();
          struct.setStatusIsSet(true);
        }
      }
    }

  }

  public static class getSchema_result implements
      org.apache.thrift.TBase<getSchema_result, getSchema_result._Fields>,
      java.io.Serializable, Cloneable, Comparable<getSchema_result> {

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
        "getSchema_result");
    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

    static {
      schemes.put(StandardScheme.class, new getSchema_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSchema_resultTupleSchemeFactory());
    }

    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
          _Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData
          .addStructMetaDataMap(getSchema_result.class, metaDataMap);
    }

    public getSchema_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSchema_result(getSchema_result other) {
    }

    public getSchema_result deepCopy() {
      return new getSchema_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
     */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null) {
        return false;
      }
      if (that instanceof getSchema_result) {
        return this.equals((getSchema_result) that);
      }
      return false;
    }

    public boolean equals(getSchema_result that) {
      if (that == null) {
        return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getSchema_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSchema_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    /**
     * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
     */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) {
          throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        }
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    private static class getSchema_resultStandardSchemeFactory implements SchemeFactory {

      public getSchema_resultStandardScheme getScheme() {
        return new getSchema_resultStandardScheme();
      }
    }

    private static class getSchema_resultStandardScheme extends StandardScheme<getSchema_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSchema_result struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the
        // validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSchema_result struct)
          throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSchema_resultTupleSchemeFactory implements SchemeFactory {

      public getSchema_resultTupleScheme getScheme() {
        return new getSchema_resultTupleScheme();
      }
    }

    private static class getSchema_resultTupleScheme extends TupleScheme<getSchema_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSchema_result struct)
          throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSchema_result struct)
          throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class merge_args implements org.apache.thrift.TBase<merge_args, merge_args._Fields>,
      java.io.Serializable, Cloneable, Comparable<merge_args> {

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
        "merge_args");
    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

    static {
      schemes.put(StandardScheme.class, new merge_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new merge_argsTupleSchemeFactory());
    }

    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
          _Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(merge_args.class, metaDataMap);
    }

    public merge_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public merge_args(merge_args other) {
    }

    public merge_args deepCopy() {
      return new merge_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
     */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null) {
        return false;
      }
      if (that instanceof merge_args) {
        return this.equals((merge_args) that);
      }
      return false;
    }

    public boolean equals(merge_args that) {
      if (that == null) {
        return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(merge_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("merge_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    /**
     * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
     */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) {
          throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        }
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    private static class merge_argsStandardSchemeFactory implements SchemeFactory {

      public merge_argsStandardScheme getScheme() {
        return new merge_argsStandardScheme();
      }
    }

    private static class merge_argsStandardScheme extends StandardScheme<merge_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, merge_args struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the
        // validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, merge_args struct)
          throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class merge_argsTupleSchemeFactory implements SchemeFactory {

      public merge_argsTupleScheme getScheme() {
        return new merge_argsTupleScheme();
      }
    }

    private static class merge_argsTupleScheme extends TupleScheme<merge_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, merge_args struct)
          throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, merge_args struct)
          throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class merge_result implements
      org.apache.thrift.TBase<merge_result, merge_result._Fields>,
      java.io.Serializable, Cloneable, Comparable<merge_result> {

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
        "merge_result");
    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "success", org.apache.thrift.protocol.TType.BOOL, (short) 0);
    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;

    static {
      schemes.put(StandardScheme.class, new merge_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new merge_resultTupleSchemeFactory());
    }

    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
          _Fields.class);
      tmpMap.put(_Fields.SUCCESS,
          new org.apache.thrift.meta_data.FieldMetaData("success",
              org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(
                  org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData
          .addStructMetaDataMap(merge_result.class, metaDataMap);
    }

    public boolean success; // required
    private byte __isset_bitfield = 0;

    public merge_result() {
    }

    public merge_result(boolean success) {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public merge_result(merge_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public merge_result deepCopy() {
      return new merge_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public merge_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /**
     * Returns true if field success is set (has been assigned a value) and false otherwise
     */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case SUCCESS:
          if (value == null) {
            unsetSuccess();
          } else {
            setSuccess((Boolean) value);
          }
          break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
        case SUCCESS:
          return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
     */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
        case SUCCESS:
          return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null) {
        return false;
      }
      if (that instanceof merge_result) {
        return this.equals((merge_result) that);
      }
      return false;
    }

    public boolean equals(merge_result that) {
      if (that == null) {
        return false;
      }

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success)) {
          return false;
        }
        if (this.success != that.success) {
          return false;
        }
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(merge_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("merge_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is
        // wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    /**
     * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
     */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short) 0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) {
          throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        }
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    private static class merge_resultStandardSchemeFactory implements SchemeFactory {

      public merge_resultStandardScheme getScheme() {
        return new merge_resultStandardScheme();
      }
    }

    private static class merge_resultStandardScheme extends StandardScheme<merge_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, merge_result struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the
        // validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, merge_result struct)
          throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class merge_resultTupleSchemeFactory implements SchemeFactory {

      public merge_resultTupleScheme getScheme() {
        return new merge_resultTupleScheme();
      }
    }

    private static class merge_resultTupleScheme extends TupleScheme<merge_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, merge_result struct)
          throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, merge_result struct)
          throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class afterReceiving_args
      implements org.apache.thrift.TBase<afterReceiving_args, afterReceiving_args._Fields>,
      java.io.Serializable,
      Cloneable, Comparable<afterReceiving_args> {

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
        "afterReceiving_args");
    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

    static {
      schemes.put(StandardScheme.class, new afterReceiving_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new afterReceiving_argsTupleSchemeFactory());
    }

    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
          _Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData
          .addStructMetaDataMap(afterReceiving_args.class, metaDataMap);
    }

    public afterReceiving_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public afterReceiving_args(afterReceiving_args other) {
    }

    public afterReceiving_args deepCopy() {
      return new afterReceiving_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
     */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null) {
        return false;
      }
      if (that instanceof afterReceiving_args) {
        return this.equals((afterReceiving_args) that);
      }
      return false;
    }

    public boolean equals(afterReceiving_args that) {
      if (that == null) {
        return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(afterReceiving_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("afterReceiving_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    /**
     * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
     */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) {
          throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        }
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    private static class afterReceiving_argsStandardSchemeFactory implements SchemeFactory {

      public afterReceiving_argsStandardScheme getScheme() {
        return new afterReceiving_argsStandardScheme();
      }
    }

    private static class afterReceiving_argsStandardScheme extends
        StandardScheme<afterReceiving_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, afterReceiving_args struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the
        // validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, afterReceiving_args struct)
          throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class afterReceiving_argsTupleSchemeFactory implements SchemeFactory {

      public afterReceiving_argsTupleScheme getScheme() {
        return new afterReceiving_argsTupleScheme();
      }
    }

    private static class afterReceiving_argsTupleScheme extends TupleScheme<afterReceiving_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, afterReceiving_args struct)
          throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, afterReceiving_args struct)
          throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class afterReceiving_result
      implements org.apache.thrift.TBase<afterReceiving_result, afterReceiving_result._Fields>,
      java.io.Serializable, Cloneable, Comparable<afterReceiving_result> {

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
        "afterReceiving_result");
    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

    static {
      schemes.put(StandardScheme.class, new afterReceiving_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new afterReceiving_resultTupleSchemeFactory());
    }

    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
          _Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData
          .addStructMetaDataMap(afterReceiving_result.class, metaDataMap);
    }

    public afterReceiving_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public afterReceiving_result(afterReceiving_result other) {
    }

    public afterReceiving_result deepCopy() {
      return new afterReceiving_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
     */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null) {
        return false;
      }
      if (that instanceof afterReceiving_result) {
        return this.equals((afterReceiving_result) that);
      }
      return false;
    }

    public boolean equals(afterReceiving_result that) {
      if (that == null) {
        return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(afterReceiving_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("afterReceiving_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    /**
     * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
     */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) {
          throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        }
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    private static class afterReceiving_resultStandardSchemeFactory implements SchemeFactory {

      public afterReceiving_resultStandardScheme getScheme() {
        return new afterReceiving_resultStandardScheme();
      }
    }

    private static class afterReceiving_resultStandardScheme extends
        StandardScheme<afterReceiving_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, afterReceiving_result struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the
        // validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, afterReceiving_result struct)
          throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class afterReceiving_resultTupleSchemeFactory implements SchemeFactory {

      public afterReceiving_resultTupleScheme getScheme() {
        return new afterReceiving_resultTupleScheme();
      }
    }

    private static class afterReceiving_resultTupleScheme extends
        TupleScheme<afterReceiving_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, afterReceiving_result struct)
          throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, afterReceiving_result struct)
          throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class init_args implements org.apache.thrift.TBase<init_args, init_args._Fields>,
      java.io.Serializable, Cloneable, Comparable<init_args> {

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
        "init_args");
    private static final org.apache.thrift.protocol.TField STORAGE_GROUP_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "storageGroup", org.apache.thrift.protocol.TType.STRING, (short) 1);
    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

    static {
      schemes.put(StandardScheme.class, new init_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new init_argsTupleSchemeFactory());
    }

    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
          _Fields.class);
      tmpMap
          .put(_Fields.STORAGE_GROUP, new org.apache.thrift.meta_data.FieldMetaData("storageGroup",
              org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(
                  org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(init_args.class, metaDataMap);
    }

    public String storageGroup; // required

    public init_args() {
    }

    public init_args(String storageGroup) {
      this();
      this.storageGroup = storageGroup;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public init_args(init_args other) {
      if (other.isSetStorageGroup()) {
        this.storageGroup = other.storageGroup;
      }
    }

    public init_args deepCopy() {
      return new init_args(this);
    }

    @Override
    public void clear() {
      this.storageGroup = null;
    }

    public String getStorageGroup() {
      return this.storageGroup;
    }

    public init_args setStorageGroup(String storageGroup) {
      this.storageGroup = storageGroup;
      return this;
    }

    public void unsetStorageGroup() {
      this.storageGroup = null;
    }

    /**
     * Returns true if field storageGroup is set (has been assigned a value) and false otherwise
     */
    public boolean isSetStorageGroup() {
      return this.storageGroup != null;
    }

    public void setStorageGroupIsSet(boolean value) {
      if (!value) {
        this.storageGroup = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case STORAGE_GROUP:
          if (value == null) {
            unsetStorageGroup();
          } else {
            setStorageGroup((String) value);
          }
          break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
        case STORAGE_GROUP:
          return getStorageGroup();

      }
      throw new IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
     */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
        case STORAGE_GROUP:
          return isSetStorageGroup();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null) {
        return false;
      }
      if (that instanceof init_args) {
        return this.equals((init_args) that);
      }
      return false;
    }

    public boolean equals(init_args that) {
      if (that == null) {
        return false;
      }

      boolean this_present_storageGroup = true && this.isSetStorageGroup();
      boolean that_present_storageGroup = true && that.isSetStorageGroup();
      if (this_present_storageGroup || that_present_storageGroup) {
        if (!(this_present_storageGroup && that_present_storageGroup)) {
          return false;
        }
        if (!this.storageGroup.equals(that.storageGroup)) {
          return false;
        }
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(init_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStorageGroup()).compareTo(other.isSetStorageGroup());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStorageGroup()) {
        lastComparison = org.apache.thrift.TBaseHelper
            .compareTo(this.storageGroup, other.storageGroup);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("init_args(");
      boolean first = true;

      sb.append("storageGroup:");
      if (this.storageGroup == null) {
        sb.append("null");
      } else {
        sb.append(this.storageGroup);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    /**
     * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
     */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STORAGE_GROUP((short) 1, "storageGroup");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          case 1: // STORAGE_GROUP
            return STORAGE_GROUP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) {
          throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        }
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    private static class init_argsStandardSchemeFactory implements SchemeFactory {

      public init_argsStandardScheme getScheme() {
        return new init_argsStandardScheme();
      }
    }

    private static class init_argsStandardScheme extends StandardScheme<init_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, init_args struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // STORAGE_GROUP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.storageGroup = iprot.readString();
                struct.setStorageGroupIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the
        // validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, init_args struct)
          throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.storageGroup != null) {
          oprot.writeFieldBegin(STORAGE_GROUP_FIELD_DESC);
          oprot.writeString(struct.storageGroup);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class init_argsTupleSchemeFactory implements SchemeFactory {

      public init_argsTupleScheme getScheme() {
        return new init_argsTupleScheme();
      }
    }

    private static class init_argsTupleScheme extends TupleScheme<init_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, init_args struct)
          throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStorageGroup()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetStorageGroup()) {
          oprot.writeString(struct.storageGroup);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, init_args struct)
          throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.storageGroup = iprot.readString();
          struct.setStorageGroupIsSet(true);
        }
      }
    }

  }

  public static class init_result implements
      org.apache.thrift.TBase<init_result, init_result._Fields>,
      java.io.Serializable, Cloneable, Comparable<init_result> {

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
        "init_result");
    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

    static {
      schemes.put(StandardScheme.class, new init_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new init_resultTupleSchemeFactory());
    }

    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
          _Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData
          .addStructMetaDataMap(init_result.class, metaDataMap);
    }

    public init_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public init_result(init_result other) {
    }

    public init_result deepCopy() {
      return new init_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
     */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null) {
        return false;
      }
      if (that instanceof init_result) {
        return this.equals((init_result) that);
      }
      return false;
    }

    public boolean equals(init_result that) {
      if (that == null) {
        return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(init_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("init_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    /**
     * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
     */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) {
          throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        }
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    private static class init_resultStandardSchemeFactory implements SchemeFactory {

      public init_resultStandardScheme getScheme() {
        return new init_resultStandardScheme();
      }
    }

    private static class init_resultStandardScheme extends StandardScheme<init_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, init_result struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the
        // validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, init_result struct)
          throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class init_resultTupleSchemeFactory implements SchemeFactory {

      public init_resultTupleScheme getScheme() {
        return new init_resultTupleScheme();
      }
    }

    private static class init_resultTupleScheme extends TupleScheme<init_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, init_result struct)
          throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, init_result struct)
          throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

}
