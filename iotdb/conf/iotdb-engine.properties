# JDBC Server configuration

# port which JDBC server listens to
rpc_port=6667

# Write ahead log configuration

# Is write ahead log enable
enable_wal=true

# When the total number of write ahead log in the file and memory reaches the specified size, all the logs are compressed and the unused logs are removed
# Increase this value, it will lead to short write pause. Decrease this value, it will increase IO and CPU consumption
wal_cleanup_threshold=500000

# When a certain amount ofwrite ahead log is reached, it will be flushed to disk
# It is possible to lose at most flush_wal_threshold operations
flush_wal_threshold=10000

# The cycle when write ahead log is periodically refreshed to disk(in milliseconds)
# It is possible to lose at most flush_wal_period_in_ms ms operations
flush_wal_period_in_ms=10

# database features configuration

# data dir
# If this property is unset, system will save the data in the default relative path directory under the IoTDB folder(i.e., %IOTDB_HOME%/data/data).
# If it is absolute, system will save the data in exact location it points to.
# If it is relative, system will save the data in the relative path directory it indicates under the IoTDB folder.
# Note: If data_dir is assigned an empty string(i.e.,zero-length), it will be handled as a relative path.
# For windows platform
# If its prefix is a drive specifier followed by "\\", or if its prefix is "\\\\", then the path is absolute. Otherwise, it is relative.
# data_dir=D:\\iotdb\\data\\data
# For Linux platform
# If its prefix is "/", then the path is absolute. Otherwise, it is relative.
# data_dir=/path/iotdb/data/data

# system dir
# If this property is unset, system will save the data in the default relative path directory under the IoTDB folder(i.e., %IOTDB_HOME%/data/system).
# If it is absolute, system will save the data in exact location it points to.
# If it is relative, system will save the data in the relative path directory it indicates under the IoTDB folder.
# Note: If sys_dir is assigned an empty string(i.e.,zero-length), it will be handled as a relative path.
# For windows platform
# If its prefix is a drive specifier followed by "\\", or if its prefix is "\\\\", then the path is absolute. Otherwise, it is relative.
# sys_dir=D:\\iotdb\\data\\system
# For Linux platform
# If its prefix is "/", then the path is absolute. Otherwise, it is relative.
# sys_dir=/path/iotdb/data/system

# wal dir
# If this property is unset, system will save the data in the default relative path directory under the IoTDB folder(i.e., %IOTDB_HOME%/data).
# If it is absolute, system will save the data in the exact location it points to.
# If it is relative, system will save the data in the relative path directory it indicates under the IoTDB folder.
# Note: If wal_dir is assigned an empty string(i.e.,zero-length), it will be handled as a relative path.
# For windows platform
# If its prefix is a drive specifier followed by "\\", or if its prefix is "\\\\", then the path is absolute. Otherwise, it is relative.
# wal_dir=D:\\iotdb\\data
# For Linux platform
# If its prefix is "/", then the path is absolute. Otherwise, it is relative.
# wal_dir=/path/iotdb/data


# The maximum concurrent thread number for merging overflow
# Increase this value, it will increase IO and CPU consumption
# Decrease this value, when there is much overflow data, it will increase disk usage, which will reduce read speed
# When the value<=0 or > CPU core number, use the CPU core number.
merge_concurrent_threads=0

# Maximum number of folders open at the same time
# Increase this value, it will use more memory, random I/O becomes smaller, file fragmentation (i.e., group) is more neat.
# Decrease this value, it will use less memory, random I/O becomes greater, file fragmentation is less neat.
# group_size_in_byte * max_opened_folder = theoretical value of maximum memory occupancy
# For an application, the total amount of folder is equal to the number of storage_group settings in SQL
max_opened_folder=100

# The amount of data that is read every time when IoTDB merge data.
fetch_size=10000

# The period time of flushing data from memory to file. 
# The unit is second.
period_time_for_flush_in_second=3600
# The period time for merge overflow data with tsfile data.
# The unit is second.
period_time_for_merge_in_second=7200
#When set to true, start timing flush and merge service. False, stop timing flush and merge service.
#Default is true.
enable_timing_close_and_Merge=true

# time zone of server side
# default value is +08:00
# eg. +08:00, -01:00
time_zone=+08:00
        
# if memory used by write reaches this threshold, auto flush will be triggered, percentile of Java heap memory
mem_threshold_warning=0.5

# if memory used by write reaches this threshold, write will be blocked, percentile of Java heap memory
mem_threshold_dangerous=0.6

# every such interval, a thread will check if memory exceeds mem_threshold_warning
# if do exceed, auto flush will be triggered, in ms, 1s by default
mem_monitor_interval=1000

# Decide how to control memory used by inserting data.
# 0 is RecordMemController, which count the size of every record (tuple).
# 1 is JVMMemController, which use JVM heap memory as threshold.
mem_controller_type=0

# When a bufferwrite's metadata size (in byte) exceed this, the bufferwrite is forced closed.
bufferwrite_meta_size_threshold=209715200

# When a bufferwrite's file size (in byte) exceeds this, the bufferwrite is forced closed.
bufferwrite_file_size_threshold=2147483648

# When a overflow's metadata size (in byte) exceeds this, the overflow is forced closed.
overflow_meta_size_threshold=20971520

# When a overflow's file size (in byte) exceeds this, the overflow is forced closed.
overflow_file_size_threshold=209715200

# How many thread can concurrently flush. When <= 0, use CPU core number.
concurrent_flush_thread=0


# Statistics Monitor configuration
# Set enable_stat_monitor true(or false) to enable(or disable) the StatMonitor that stores statistics info periodically.
# back_loop_period_sec decides the period when StatMonitor writes statistics info into IoTDB.
# stat_monitor_detect_freq_sec decides when IoTDB detects statistics info out-of-date.
# IoTDB just keeps statistics info within stat_monitor_retain_interval_sec seconds before current time.
# Note: IoTDB requires stat_monitor_detect_freq_sec >= 600s and stat_monitor_retain_interval_sec >= 600s.

# The monitor, which writes statistics info to IoTDB periodically, is disabled by default.
enable_stat_monitor = false

# The period that StatMonitor stores statistics info
back_loop_period_sec = 5

# The interval at which StatMonitor starts to check whether statistics info can be deleted due to exceeding the retention volume
stat_monitor_detect_freq_sec = 600

# The minimum age of statistics storage information to be eligible for deletion due to age
stat_monitor_retain_interval_sec = 600


# When set false, MemMonitorThread and MemStatisticThread will not be created.
enable_mem_monitor=true

# When set to true, small flush will be triggered periodically even if memory threshold is not exceeded.
enable_small_flush=true

# The interval of small flush in ms.
small_flush_interval=60000

# The threshold of lines of external sort
external_sort_threshold = 50

# cache size for MManager.
# This cache is used to improve write speed where all path check and TSDataType will be cached in MManager with corresponding Path.
schema_manager_cache_size = 300000

# If the size in byte of a WAL log exceeds this, it won't be written.
# Generally the default value 4MB is enough.
max_log_entry_size=4194304
