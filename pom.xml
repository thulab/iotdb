<?xml version="1.0" encoding="UTF-8"?>
<!-- Copyright (c) 2012 - 2016 YCSB contributors. All rights reserved. Licensed 
	under the Apache License, Version 2.0 (the "License"); you may not use this 
	file except in compliance with the License. You may obtain a copy of the 
	License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by 
	applicable law or agreed to in writing, software distributed under the License 
	is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY 
	KIND, either express or implied. See the License for the specific language 
	governing permissions and limitations under the License. See accompanying 
	LICENSE file. -->

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>cn.edu.tsinghua</groupId>
	<artifactId>root</artifactId>
	<version>0.8.0-SNAPSHOT</version>
	<packaging>pom</packaging>

	<name>IoTDB Root</name>

	<description>
    This is the top level project that builds, packages the tsfile, iotdb engine, jdbc, and integration libs.
  </description>

	<licenses>
		<license>
			<name>The Apache License, Version 2.0</name>
			<url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>
		</license>
	</licenses>

	<developers>
		<developer>
			<name>Jianmin Wang</name>
			<email>jimwang@tsinghua.edu.cn</email>
			<organization>School of Software, Tsinghua University</organization>
			<organizationUrl>http://thss.tsinghua.edu.cn/publish/soften/index.html</organizationUrl>
		</developer>
		<developer>
			<name>Xiangdong Huang</name>
		</developer>
		<developer>
			<name>Rong Kang</name>
		</developer>
		<developer>
			<name>Jinrui Zhang</name>
		</developer>
		<developer>
			<name>Jialin Qiao</name>
		</developer>
		<developer>
			<name>Yi Xu</name>
		</developer>
		<developer>
			<name>Gaofei Cao</name>
		</developer>
		<developer>
			<name>Kun Liu</name>
		</developer>
	</developers>

	<scm>
		<connection>scm:git:git://github.com/thulab/iotdb.git</connection>
		<developerConnection>scm:git:ssh://github.com:thulab/iotdb.git</developerConnection>
		<url>http://github.com/thulab/iotdb/tree/master</url>
		<tag>v0.8.0</tag>
	</scm>


	<!-- if we claim dependencies in dependencyManagement, then we do not claim 
		their version in sub-project's pom, but we have to claim themselves again 
		in sub-projects -->
	<dependencyManagement>
		<dependencies>
			<!-- in the subprojects, you have to claim logback again, because maybe 
				someone in your dependences uses log4j lib. -->
			<dependency>
				<groupId>ch.qos.logback</groupId>
				<artifactId>logback-classic</artifactId>
				<version>${logback.version}</version>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<dependencies>
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
			<version>${logback.version}</version>
		</dependency>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>${junit.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-all</artifactId>
			<version>1.10.19</version>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<!-- Properties Management -->
	<properties>
		<project.version>0.8.0-SNAPSHOT</project.version>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<maven.assembly.version>2.5.5</maven.assembly.version>
		<compile.version>1.8</compile.version>
		<targetJavaVersion>1.8</targetJavaVersion>
		<maven.compiler.source>1.8</maven.compiler.source>
		<maven.compiler.target>${targetJavaVersion}</maven.compiler.target>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<scala.version>2.0.1</scala.version>
		<hadoop.version>2.7.3</hadoop.version>
		<junit.version>4.12</junit.version>
		<slf4j.version>1.7.12</slf4j.version>
		<logback.version>1.1.3</logback.version>
		<json.version>20140107</json.version>
		<joda.version>2.9.9</joda.version>
                <!-- <skip.ut>false</skip.ut>
		<skip.it>false</skip.it> -->
		<spark.version>2.0.1</spark.version>
		<json.version>20140107</json.version>
		<libthrift.version>0.9.1</libthrift.version>
		<common.io.version>2.5</common.io.version>
		<commons.collections4>4.0</commons.collections4>
	</properties>

	<modules>
		<module>tsfile</module>
		<module>jdbc</module>
		<module>iotdb</module>
		<module>grafana</module>
		<!-- <module>hadoop</module> -->
		<!-- <module>spark</module> -->
	</modules>

	<build>
		<pluginManagement>
			<plugins>
				<!-- if we claim plugins in pluginManagement, then we do not claim their 
					version and detailed configuration in sub-project's pom, but we have to claim 
					themselves again in sub-projects -->
			</plugins>
		</pluginManagement>

		<plugins>
			<!--for code style check -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-checkstyle-plugin</artifactId>
				<version>2.16</version>
				<executions>
					<execution>
						<id>validate</id>
						<phase>validate</phase>
						<goals>
							<goal>check</goal>
						</goals>
						<configuration>
							<configLocation>checkstyle.xml</configLocation>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.6.1</version>
				<configuration>
					<source>${compile.version}</source>
					<target>${targetJavaVersion}</target>
					<encoding>${project.build.sourceEncoding}</encoding>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<version>2.10</version>
				<executions>
					<execution>
						<id>copy-dependencies</id>
						<phase>package</phase>
						<goals>
							<goal>copy-dependencies</goal>
						</goals>
						<configuration>
							<outputDirectory>${project.build.directory}/lib</outputDirectory>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-assembly-plugin</artifactId>
				<version>2.5.5</version>
				<executions>
					<execution>
						<configuration>
							<descriptorRefs>
								<descriptorRef>jar-with-dependencies</descriptorRef>
							</descriptorRefs>
						</configuration>
						<id>make-assembly</id>
						<phase>package</phase>
						<goals>
							<goal>single</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<!--use `mvn cobertura:cobertura` -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>cobertura-maven-plugin</artifactId>
				<version>2.7</version>
				<configuration>
					<quiet>true</quiet>
					<formats>
						<format>xml</format>
					</formats>
					<instrumentation>
						<ignoreTrivial>true</ignoreTrivial>
					</instrumentation>
				</configuration>
				<executions>
					<execution>
						<id>check</id>
						<!-- skip when executing 'mvn clean test' -->
						<!-- <phase>test</phase> -->
						<goals>
							<goal>cobertura</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<!-- temporary, we do not enable the following plugin -->
			<!--<plugin> <groupId>net.revelc.code.formatter</groupId> <artifactId>formatter-maven-plugin</artifactId> 
				<version>2.7.5</version> <executions> <execution> <goals> <goal>format</goal> 
				</goals> <configuration> <encoding>UTF-8</encoding> <configFile>${project.basedir}/checkstyle.xml</configFile> 
				</configuration> </execution> </executions> </plugin> -->

		</plugins>
	</build>
</project>
